# coding=utf-8


"""
批量生成模拟数据
可在生成后删除.
"""
from datetime import datetime, timedelta
import os
import codecs
import time
import random

from faker import Faker

# from china_regions.data import provinces, get_cities_by_province, get_districts_by_city

import pandas
import numpy as np
import pandas as pd


def normal(size):
    arr = np.random.normal(size=size + 1)
    arr = np.round(arr, decimals=2)
    return arr


def get(faker: Faker, mcfieldnamezh, mctablenamezh=""):
    """
    根据表字段的中文名修正为合适的生成方式
    扩展建议:
    根据字段名->实体名->枚举
    关联字段->同时生成多个字段
    """
    val = ""
    if "ID" in mcfieldnamezh or "主键" in mcfieldnamezh or "唯一标识" in mcfieldnamezh:
        val = str(faker.uuid4())[:8]
        return val
    if "时间戳" == mcfieldnamezh:
        # val = str(int(time.mktime(faker.date_this_decade().timetuple())))
        # return val

        val = faker.date_between(
            start_date=datetime.now() - timedelta(days=3 * 4), end_date=datetime.now()
        )
        return val
    if "时间" in mcfieldnamezh:
        val = faker.date_between(
            start_date=datetime.now() - timedelta(days=3 * 4), end_date=datetime.now()
        )
        return val
    if "日期" in mcfieldnamezh:
        val = faker.date_between(
            start_date=datetime.now() - timedelta(days=3 * 4), end_date=datetime.now()
        )
        return val
    if "率" == mcfieldnamezh[-1]:
        val = int(normal(10)[faker.random.randint(0, 10)])
        return val
    if "地点" in mcfieldnamezh:
        val = faker.address()
        return val
    # if '类型' in mcfieldnamezh or '类别' in mcfieldnamezh:
    #     val = faker.random.choice((
    #         # 根据文心一言/chatgpt/chatglm生产20个左右的类别即可.
    #     ))
    #     return val

    # 视频信息表

    # 视频信息表.视频ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频信息表.视频标题 <CharField>
    #

    if mcfieldnamezh == "视频标题":

        # 载入配置成功
        # 给出一些视频信息表表中视频标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "示例视频1",
                "示例视频2",
                "测试视频3",
                "教学视频4",
                "电影片段5",
                "旅行记录6",
                "美食分享7",
                "健身教程8",
                "游戏直播9",
                "动物世界10",
                "音乐MV11",
                "科技前沿12",
                "历史回顾13",
                "艺术欣赏14",
                "时尚穿搭15",
                "汽车评测16",
                "房产介绍17",
                "教育讲座18",
                "娱乐八卦19",
                "生活小妙招20",
            )
        )

        val = loadvalue

        return val
    # 视频信息表.视频描述 <TextField>
    #

    if mcfieldnamezh == "视频描述":

        # 载入配置成功
        # 给出一些视频信息表表中视频描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "这是一个关于旅行风景的视频描述，展示了美丽的海滩和日落。",
                "这个视频描述了最新的科技产品发布会，包括各种创新功能和设计。",
                "烹饪爱好者必看！这个视频描述了如何制作美味的意大利面，包含详细的步骤和技巧。",
                "音乐爱好者不容错过！这个视频描述了最新的音乐会和歌手的现场表演。",
                "这个视频是关于健身的，介绍了如何在家中进行有效的全身锻炼。",
                "孩子们的最爱！这个视频描述了一个有趣的童话故事，带有生动的动画和声音。",
                "探索未知的世界！这个视频描述了深海探险的惊险和美丽。",
                "这个视频是关于历史的，讲述了二战期间的重要战役和事件。",
                "时尚达人必看！这个视频描述了最新的时尚趋势和流行单品。",
                "这个视频是关于自然保护的，强调了保护环境和野生动物的重要性。",
                "学习新技能！这个视频介绍了如何编程和创建自己的网站。",
                "这个视频是关于摄影的，分享了拍摄美丽风景的技巧和策略。",
                "感受大自然的魅力！这个视频描述了登山和徒步旅行的乐趣和挑战。",
                "这个视频是关于汽车的，介绍了最新的汽车技术和驾驶体验。",
                "探索宇宙的奥秘！这个视频描述了太空探索和宇宙的壮丽景色。",
                "这个视频是关于艺术的，展示了各种绘画和雕塑作品。",
                "了解不同文化！这个视频描述了世界各地的节日和传统。",
                "这个视频是关于动物的，介绍了各种珍稀动物的生活习性和栖息地。",
                "享受美食之旅！这个视频描述了世界各地的美食和烹饪文化。",
                "这个视频是关于旅游的，推荐了全球最受欢迎的旅游目的地和景点。",
            )
        )

        val = loadvalue

        return val
    # 视频信息表.上传时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "上传时间":

        # 载入配置成功
        # 给出一些视频信息表表中上传时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:15:30",
                "2023-03-15 11:30:45",
                "2023-03-15 12:45:15",
                "2023-03-15 14:00:00",
                "2023-03-15 15:15:30",
                "2023-03-15 16:30:45",
                "2023-03-15 17:45:15",
                "2023-03-16 08:00:00",
                "2023-03-16 09:15:30",
                "2023-03-16 10:30:45",
                "2023-03-16 11:45:15",
                "2023-03-16 13:00:00",
                "2023-03-16 14:15:30",
                "2023-03-16 15:30:45",
                "2023-03-16 16:45:15",
                "2023-03-17 07:00:00",
                "2023-03-17 08:15:30",
                "2023-03-17 09:30:45",
                "2023-03-17 10:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频信息表.视频时长秒 <CharField>
    #

    if mcfieldnamezh == "视频时长秒":

        # 载入配置成功
        # 给出一些视频信息表表中视频时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "120",
                "180",
                "90",
                "150",
                "240",
                "100",
                "130",
                "200",
                "110",
                "160",
                "95",
                "170",
                "220",
                "140",
                "210",
                "190",
                "85",
                "125",
                "230",
                "105",
                "195",
            )
        )

        val = loadvalue

        return val
    # 视频信息表.视频分辨率 <CharField>
    #

    if mcfieldnamezh == "视频分辨率":

        # 载入配置成功
        # 给出一些视频信息表表中视频分辨率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1920x1080",
                "1280x720",
                "1366x768",
                "1600x900",
                "1440x900",
                "1024x768",
                "800x600",
                "720x480",
                "320x240",
                "2560x1440",
                "3840x2160",
                "4096x2160",
                "5120x2880",
                "640x480",
                "1080x1920",
                "2160x3840",
                "3440x1440",
                "3840x1600",
                "480x800",
                "576x320",
            )
        )

        val = loadvalue

        return val
    # 视频信息表.文件类型 <FileField>
    #

    if mcfieldnamezh == "文件类型":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频信息表.文件大小KBMBGB <FileField>
    #

    if mcfieldnamezh == "文件大小KBMBGB":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频信息表.创建者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者ID关联用户":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频信息表.类别ID关联视频类别 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "类别ID关联视频类别":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分类表

    # 视频分类表.分类名称 <CharField>
    #

    if mcfieldnamezh == "分类名称":

        # 载入配置成功
        # 给出一些视频分类表表中分类名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "电子产品",
                "家用电器",
                "服装鞋帽",
                "食品饮料",
                "图书音像",
                "美妆护肤",
                "母婴用品",
                "家居家装",
                "运动户外",
                "汽车用品",
                "数码配件",
                "玩具乐器",
                "箱包配饰",
                "钟表眼镜",
                "珠宝首饰",
                "宠物用品",
                "文化娱乐",
                "办公用品",
                "厨具餐具",
                "礼品鲜花",
            )
        )

        val = loadvalue

        return val
    # 视频分类表.分类描述 <TextField>
    #

    if mcfieldnamezh == "分类描述":

        # 载入配置成功
        # 给出一些视频分类表表中分类描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "电子产品",
                "书籍与杂志",
                "家居用品",
                "服装与配饰",
                "美妆护肤",
                "食品饮料",
                "运动健身",
                "母婴用品",
                "汽车配件",
                "办公用品",
                "玩具与游戏",
                "珠宝首饰",
                "宠物用品",
                "旅行箱包",
                "数码配件",
                "园艺工具",
                "乐器与音响",
                "图书音像",
                "钟表眼镜",
                "厨具餐具",
            )
        )

        val = loadvalue

        return val
    # 视频分类表.父分类ID用于构建分类层级如果为顶级分类则为NULL <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "父分类ID用于构建分类层级如果为顶级分类则为NULL":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分类表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频分类表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频分类表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频分类表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频分类表.是否激活用于控制分类是否显示在前端 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于控制分类是否显示在前端":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频分类表.排序顺序 <CharField>
    #

    if mcfieldnamezh == "排序顺序":

        # 载入配置成功
        # 给出一些视频分类表表中排序顺序的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "ORDER BY",
                "field1",
                "field2",
                "field3",
                "field4",
                "field5",
                "field6",
                "field7",
                "field8",
                "field9",
                "field10",
                "field11",
                "field12",
                "field13",
                "field14",
                "field15",
                "field16",
                "field17",
                "field18",
                "field19",
                "field20",
                "ORDER BY",
                "field1",
                "field2",
                "field3",
                "field4",
                "field5",
                "field6",
                "field7",
                "field8",
                "field9",
                "field10",
                "field11",
                "field12",
                "field13",
                "field14",
                "field15",
                "field16",
                "field17",
                "field18",
                "field19",
                "field20",
            )
        )

        val = loadvalue

        return val
    # 视频标签表

    # 视频标签表.标签ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "标签ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频标签表.标签名称 <CharField>
    #

    if mcfieldnamezh == "标签名称":

        # 载入配置成功
        # 给出一些视频标签表表中标签名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "标签1",
                "标签2",
                "标签3",
                "标签4",
                "标签5",
                "标签6",
                "标签7",
                "标签8",
                "标签9",
                "标签10",
                "标签11",
                "标签12",
                "标签13",
                "标签14",
                "标签15",
                "标签16",
                "标签17",
                "标签18",
                "标签19",
                "标签20",
            )
        )

        val = loadvalue

        return val
    # 视频标签表.视频ID关联字段指向视频中的视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联字段指向视频中的视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频标签表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频标签表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频标签表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频标签表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频标签表.是否激活用于标记标签是否可用 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于标记标签是否可用":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频标签表.标签描述 <TextField>
    #

    if mcfieldnamezh == "标签描述":

        # 载入配置成功
        # 给出一些视频标签表表中标签描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "用户姓名",
                "用户邮箱",
                "用户密码",
                "手机号码",
                "注册时间",
                "最后登录时间",
                "用户状态",
                "性别",
                "生日",
                "地址",
                "邮编",
                "国家",
                "省份",
                "城市",
                "职业",
                "兴趣爱好",
                "个人简介",
                "头像链接",
                "邮箱验证状态",
                "手机号码验证状态",
            )
        )

        val = loadvalue

        return val
    # 视频标签表.创建者ID关联字段指向用户中的用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者ID关联字段指向用户中的用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表

    # 视频文件存储表.视频ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表.文件名 <FileField>
    #

    if mcfieldnamezh == "文件名":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表.文件存储路径 <FileField>
    #

    if mcfieldnamezh == "文件存储路径":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表.文件大小单位MB <FileField>
    #

    if mcfieldnamezh == "文件大小单位MB":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表.上传时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "上传时间":

        # 载入配置成功
        # 给出一些视频文件存储表表中上传时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:15:30",
                "2023-03-15 11:30:45",
                "2023-03-15 12:45:15",
                "2023-03-15 14:00:00",
                "2023-03-15 15:15:30",
                "2023-03-15 16:30:45",
                "2023-03-15 17:45:15",
                "2023-03-16 08:00:00",
                "2023-03-16 09:15:30",
                "2023-03-16 10:30:45",
                "2023-03-16 11:45:15",
                "2023-03-16 13:00:00",
                "2023-03-16 14:15:30",
                "2023-03-16 15:30:45",
                "2023-03-16 16:45:15",
                "2023-03-17 07:00:00",
                "2023-03-17 08:15:30",
                "2023-03-17 09:30:45",
                "2023-03-17 10:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频文件存储表.视频时长单位秒 <CharField>
    #

    if mcfieldnamezh == "视频时长单位秒":

        # 给出一些视频文件存储表表中视频时长单位秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频文件存储表.分辨率例如1920x1080 <CharField>
    #

    if mcfieldnamezh == "分辨率例如1920x1080":

        # 给出一些视频文件存储表表中分辨率例如1920x1080的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频文件存储表.视频格式例如mp4 <CharField>
    #

    if mcfieldnamezh == "视频格式例如mp4":

        # 给出一些视频文件存储表表中视频格式例如mp4的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频文件存储表.创建者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者ID关联用户":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频文件存储表.分类ID关联视频分类 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "分类ID关联视频分类":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频播放记录表

    # 视频播放记录表.视频ID关联视频信息 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联视频信息":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频播放记录表.用户ID关联用户信息 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "用户ID关联用户信息":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频播放记录表.播放开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "播放开始时间":

        # 载入配置成功
        # 给出一些视频播放记录表表中播放开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 08:00:00",
                "2023-10-23 09:15:30",
                "2023-10-23 10:45:15",
                "2023-10-23 12:30:00",
                "2023-10-23 14:15:45",
                "2023-10-23 16:00:15",
                "2023-10-23 17:45:30",
                "2023-10-23 19:30:00",
                "2023-10-24 01:15:15",
                "2023-10-24 03:00:45",
                "2023-10-24 04:45:30",
                "2023-10-24 06:30:15",
                "2023-10-24 08:15:00",
                "2023-10-24 10:00:30",
                "2023-10-24 11:45:45",
                "2023-10-24 13:30:15",
                "2023-10-24 15:15:00",
                "2023-10-24 17:00:30",
                "2023-10-24 18:45:15",
                "2023-10-24 20:30:00",
            )
        )

        val = loadvalue

        return val
    # 视频播放记录表.播放结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "播放结束时间":

        # 载入配置成功
        # 给出一些视频播放记录表表中播放结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 14:30:00",
                "2023-10-23 15:15:45",
                "2023-10-23 16:00:12",
                "2023-10-23 16:45:30",
                "2023-10-23 17:30:45",
                "2023-10-23 18:15:15",
                "2023-10-23 19:00:00",
                "2023-10-23 19:45:30",
                "2023-10-23 20:30:45",
                "2023-10-23 21:15:15",
                "2023-10-23 22:00:00",
                "2023-10-23 22:45:30",
                "2023-10-23 23:30:45",
                "2023-10-24 00:15:15",
                "2023-10-24 01:00:00",
                "2023-10-24 01:45:30",
                "2023-10-24 02:30:45",
                "2023-10-24 03:15:15",
                "2023-10-24 04:00:00",
                "2023-10-24 04:45:30",
            )
        )

        val = loadvalue

        return val
    # 视频播放记录表.播放时长秒 <CharField>
    #

    if mcfieldnamezh == "播放时长秒":

        # 载入配置成功
        # 给出一些视频播放记录表表中播放时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "120",
                "180",
                "240",
                "300",
                "360",
                "420",
                "480",
                "540",
                "600",
                "660",
                "720",
                "780",
                "840",
                "900",
                "960",
                "1020",
                "1080",
                "1140",
                "1200",
                "1260",
            )
        )

        val = loadvalue

        return val
    # 视频播放记录表.播放状态如已完成、暂停、中断 <CharField>
    #

    if mcfieldnamezh == "播放状态如已完成、暂停、中断":

        # 给出一些视频播放记录表表中播放状态如已完成、暂停、中断的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频播放记录表.设备类型如手机、平板、电脑 <CharField>
    #

    if mcfieldnamezh == "设备类型如手机、平板、电脑":

        # 给出一些视频播放记录表表中设备类型如手机、平板、电脑的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频播放记录表.IP地址 <TextField>
    #

    if mcfieldnamezh == "IP地址":

        # 载入配置成功
        # 给出一些视频播放记录表表中IP地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "192.168.1.1",
                "10.0.0.1",
                "172.16.0.1",
                "127.0.0.1",
                "8.8.8.8",
                "8.8.4.4",
                "1.1.1.1",
                "2.2.2.2",
                "3.3.3.3",
                "4.4.4.4",
                "5.5.5.5",
                "6.6.6.6",
                "7.7.7.7",
                "203.0.113.1",
                "93.184.216.34",
                "149.20.4.69",
                "185.199.108.153",
                "13.107.21.200",
                "151.101.1.69",
                "198.51.100.1",
            )
        )

        val = loadvalue

        return val
    # 视频播放记录表.播放位置可选根据IP解析的地理位置 <CharField>
    #

    if mcfieldnamezh == "播放位置可选根据IP解析的地理位置":

        # 给出一些视频播放记录表表中播放位置可选根据IP解析的地理位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频评论表

    # 视频评论表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频评论表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频评论表.评论内容 <TextField>
    #

    if mcfieldnamezh == "评论内容":

        # 载入配置成功
        # 给出一些视频评论表表中评论内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "这是一个很好的产品",
                "我喜欢这个设计",
                "功能很强大",
                "价格合理",
                "服务周到",
                "发货速度快",
                "非常满意",
                "期待下次购买",
                "质量不错",
                "颜色很好看",
                "推荐给大家",
                "性价比高",
                "使用很方便",
                "操作简单易懂",
                "非常满意的一次购物",
                "物流很快",
                "包装完好",
                "卖家态度好",
                "值得购买",
                "谢谢！",
            )
        )

        val = loadvalue

        return val
    # 视频评论表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频评论表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频评论表.点赞数 <CharField>
    #

    if mcfieldnamezh == "点赞数":

        # 载入配置成功
        # 给出一些视频评论表表中点赞数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "点赞数1",
                "点赞数2",
                "点赞数3",
                "点赞数4",
                "点赞数5",
                "点赞数6",
                "点赞数7",
                "点赞数8",
                "点赞数9",
                "点赞数10",
                "点赞数11",
                "点赞数12",
                "点赞数13",
                "点赞数14",
                "点赞数15",
                "点赞数16",
                "点赞数17",
                "点赞数18",
                "点赞数19",
                "点赞数20",
            )
        )

        val = loadvalue

        return val
    # 视频评论表.回复数 <CharField>
    #

    if mcfieldnamezh == "回复数":

        # 载入配置成功
        # 给出一些视频评论表表中回复数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "回复数1",
                "回复数2",
                "回复数3",
                "回复数4",
                "回复数5",
                "回复数6",
                "回复数7",
                "回复数8",
                "回复数9",
                "回复数10",
                "回复数11",
                "回复数12",
                "回复数13",
                "回复数14",
                "回复数15",
                "回复数16",
                "回复数17",
                "回复数18",
                "回复数19",
                "回复数20",
            )
        )

        val = loadvalue

        return val
    # 视频评论表.是否已删除 <BooleanField>
    #

    if mcfieldnamezh == "是否已删除":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频评论表.关联父评论ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联父评论ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频点赞表

    # 视频点赞表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频点赞表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频点赞表.点赞时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "点赞时间":

        # 载入配置成功
        # 给出一些视频点赞表表中点赞时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 09:15:30",
                "2023-10-23 09:30:45",
                "2023-10-23 09:45:12",
                "2023-10-23 10:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 10:30:45",
                "2023-10-23 10:45:12",
                "2023-10-23 11:00:00",
                "2023-10-23 11:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 11:45:12",
                "2023-10-23 12:00:00",
                "2023-10-23 12:15:30",
                "2023-10-23 12:30:45",
                "2023-10-23 12:45:12",
                "2023-10-23 13:00:00",
                "2023-10-23 13:15:30",
                "2023-10-23 13:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频点赞表.是否点赞1为已点赞0为未点赞用于取消点赞功能 <BooleanField>
    #

    if mcfieldnamezh == "是否点赞1为已点赞0为未点赞用于取消点赞功能":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频点赞表.点赞时的IP地址 <TextField>
    #

    if mcfieldnamezh == "点赞时的IP地址":

        # 给出一些视频点赞表表中点赞时的IP地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频点赞表.点赞类型如普通点赞、特殊点赞等可用枚举或示 <CharField>
    #

    if mcfieldnamezh == "点赞类型如普通点赞、特殊点赞等可用枚举或示":

        # 给出一些视频点赞表表中点赞类型如普通点赞、特殊点赞等可用枚举或示的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频点赞表.点赞平台如Web、iOS、Android等 <CharField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "点赞平台如Web、iOS、Android等":

        # 给出一些视频点赞表表中点赞平台如Web、iOS、Android等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频点赞表.设备ID可选用于追踪用户设备 <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "设备ID可选用于追踪用户设备":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分享表

    # 视频分享表.视频分享ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频分享ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分享表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分享表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分享表.分享时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "分享时间":

        # 载入配置成功
        # 给出一些视频分享表表中分享时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 10:00:00",
                "2023-10-23 11:30:15",
                "2023-10-23 13:45:30",
                "2023-10-23 15:15:45",
                "2023-10-23 16:45:00",
                "2023-10-23 18:15:15",
                "2023-10-23 19:45:30",
                "2023-10-23 21:15:45",
                "2023-10-24 08:30:00",
                "2023-10-24 10:00:15",
                "2023-10-24 11:30:30",
                "2023-10-24 13:00:45",
                "2023-10-24 14:30:00",
                "2023-10-24 16:00:15",
                "2023-10-24 17:30:30",
                "2023-10-24 19:00:45",
                "2023-10-24 20:30:00",
                "2023-10-24 22:00:15",
                "2023-10-25 09:30:30",
                "2023-10-25 11:00:45",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.视频标题 <CharField>
    #

    if mcfieldnamezh == "视频标题":

        # 载入配置成功
        # 给出一些视频分享表表中视频标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "示例视频1",
                "示例视频2",
                "测试视频3",
                "教学视频4",
                "电影片段5",
                "旅行记录6",
                "美食分享7",
                "健身教程8",
                "游戏直播9",
                "动物世界10",
                "音乐MV11",
                "科技前沿12",
                "历史回顾13",
                "艺术欣赏14",
                "时尚穿搭15",
                "汽车评测16",
                "房产介绍17",
                "教育讲座18",
                "娱乐八卦19",
                "生活小妙招20",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.视频描述 <TextField>
    #

    if mcfieldnamezh == "视频描述":

        # 载入配置成功
        # 给出一些视频分享表表中视频描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "这是一个关于旅行风景的视频描述，展示了美丽的海滩和日落。",
                "这个视频描述了最新的科技产品发布会，包括各种创新功能和设计。",
                "烹饪爱好者必看！这个视频描述了如何制作美味的意大利面，包含详细的步骤和技巧。",
                "音乐爱好者不容错过！这个视频描述了最新的音乐会和歌手的现场表演。",
                "这个视频是关于健身的，介绍了如何在家中进行有效的全身锻炼。",
                "孩子们的最爱！这个视频描述了一个有趣的童话故事，带有生动的动画和声音。",
                "探索未知的世界！这个视频描述了深海探险的惊险和美丽。",
                "这个视频是关于历史的，讲述了二战期间的重要战役和事件。",
                "时尚达人必看！这个视频描述了最新的时尚趋势和流行单品。",
                "这个视频是关于自然保护的，强调了保护环境和野生动物的重要性。",
                "学习新技能！这个视频介绍了如何编程和创建自己的网站。",
                "这个视频是关于摄影的，分享了拍摄美丽风景的技巧和策略。",
                "感受大自然的魅力！这个视频描述了登山和徒步旅行的乐趣和挑战。",
                "这个视频是关于汽车的，介绍了最新的汽车技术和驾驶体验。",
                "探索宇宙的奥秘！这个视频描述了太空探索和宇宙的壮丽景色。",
                "这个视频是关于艺术的，展示了各种绘画和雕塑作品。",
                "了解不同文化！这个视频描述了世界各地的节日和传统。",
                "这个视频是关于动物的，介绍了各种珍稀动物的生活习性和栖息地。",
                "享受美食之旅！这个视频描述了世界各地的美食和烹饪文化。",
                "这个视频是关于旅游的，推荐了全球最受欢迎的旅游目的地和景点。",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.缩略图URL <URLField>
    #

    if mcfieldnamezh == "缩略图URL":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分享表.观看次数 <CharField>
    #

    if mcfieldnamezh == "观看次数":

        # 载入配置成功
        # 给出一些视频分享表表中观看次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "1234",
                "567",
                "890",
                "123",
                "45",
                "67",
                "89",
                "10",
                "111",
                "222",
                "333",
                "444",
                "555",
                "666",
                "777",
                "888",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.点赞次数 <CharField>
    #

    if mcfieldnamezh == "点赞次数":

        # 载入配置成功
        # 给出一些视频分享表表中点赞次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "12",
                "34",
                "56",
                "78",
                "90",
                "11",
                "22",
                "33",
                "44",
                "55",
                "66",
                "77",
                "88",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.评论次数 <TextField>
    #

    if mcfieldnamezh == "评论次数":

        # 载入配置成功
        # 给出一些视频分享表表中评论次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
            )
        )

        val = loadvalue

        return val
    # 视频分享表.分享状态例如已分享、已删除 <CharField>
    #

    if mcfieldnamezh == "分享状态例如已分享、已删除":

        # 给出一些视频分享表表中分享状态例如已分享、已删除的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频观看时长统计表

    # 视频观看时长统计表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频观看时长统计表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频观看时长统计表.观看开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "观看开始时间":

        # 载入配置成功
        # 给出一些视频观看时长统计表表中观看开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 09:30:00",
                "2023-10-23 10:00:00",
                "2023-10-23 10:30:00",
                "2023-10-23 11:00:00",
                "2023-10-23 11:30:00",
                "2023-10-23 12:00:00",
                "2023-10-23 12:30:00",
                "2023-10-23 13:00:00",
                "2023-10-23 13:30:00",
                "2023-10-23 14:00:00",
                "2023-10-23 14:30:00",
                "2023-10-23 15:00:00",
                "2023-10-23 15:30:00",
                "2023-10-23 16:00:00",
                "2023-10-23 16:30:00",
                "2023-10-23 17:00:00",
                "2023-10-23 17:30:00",
                "2023-10-23 18:00:00",
                "2023-10-23 18:30:00",
            )
        )

        val = loadvalue

        return val
    # 视频观看时长统计表.观看结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "观看结束时间":

        # 给出一些视频观看时长统计表表中观看结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频观看时长统计表.观看时长秒 <CharField>
    #

    if mcfieldnamezh == "观看时长秒":

        # 给出一些视频观看时长统计表表中观看时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频观看时长统计表.设备类型 <CharField>
    #

    if mcfieldnamezh == "设备类型":

        # 载入配置成功
        # 给出一些视频观看时长统计表表中设备类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "手机",
                "笔记本电脑",
                "平板电脑",
                "台式电脑",
                "打印机",
                "扫描仪",
                "路由器",
                "交换机",
                "投影仪",
                "显示器",
                "电视",
                "空调",
                "冰箱",
                "洗衣机",
                "微波炉",
                "烤箱",
                "空气净化器",
                "智能手表",
                "智能音箱",
                "无人机",
            )
        )

        val = loadvalue

        return val
    # 视频观看时长统计表.观看地点 <CharField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "观看地点":

        # 给出一些视频观看时长统计表表中观看地点的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频观看时长统计表.网络类型 <CharField>
    #

    if mcfieldnamezh == "网络类型":

        # 载入配置成功
        # 给出一些视频观看时长统计表表中网络类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "Wi-Fi",
                "以太网",
                "4G",
                "5G",
                "3G",
                "2G",
                "GSM",
                "CDMA",
                "LTE",
                "WCDMA",
                "TD-SCDMA",
                "光纤",
                "DSL",
                "卫星",
                "蓝牙",
                "ZigBee",
                "LoRa",
                "WiMAX",
                "GPRS",
                "NFC",
            )
        )

        val = loadvalue

        return val
    # 视频观看时长统计表.是否观看完成0未完成1已完成 <BooleanField>
    #

    if mcfieldnamezh == "是否观看完成0未完成1已完成":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频上传用户表

    # 视频上传用户表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频上传用户表.用户名 <CharField>
    #

    if mcfieldnamezh == "用户名":

        # 载入配置成功
        # 给出一些视频上传用户表表中用户名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "Alice",
                "Bob",
                "Charlie",
                "David",
                "Eve",
                "Frank",
                "Grace",
                "Henry",
                "Ivy",
                "John",
                "Kate",
                "Larry",
                "Mary",
                "Nick",
                "Olivia",
                "Peter",
                "Quincy",
                "Rachel",
                "Sam",
                "Tom",
                "Alice",
                "Bob",
                "Charlie",
                "David",
                "Eve",
                "Frank",
                "Grace",
                "Henry",
                "Ivy",
                "John",
                "Kate",
                "Larry",
                "Mary",
                "Nick",
                "Olivia",
                "Peter",
                "Quincy",
                "Rachel",
                "Sam",
                "Tom",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.电子邮件 <CharField>
    #

    if mcfieldnamezh == "电子邮件":

        # 载入配置成功
        # 给出一些视频上传用户表表中电子邮件的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "example1@email.com",
                "example2@email.com",
                "example3@email.net",
                "example4@domain.org",
                "example5@company.com",
                "example6@web.com",
                "example7@mail.com",
                "example8@info.net",
                "example9@online.com",
                "example10@contact.com",
                "example11@address.com",
                "example12@service.com",
                "example13@support.org",
                "example14@internet.com",
                "example15@local.net",
                "example16@user.com",
                "example17@webmail.com",
                "example18@inbox.org",
                "example19@host.com",
                "example20@email.org",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.电话号码 <CharField>
    #

    if mcfieldnamezh == "电话号码":

        # 载入配置成功
        # 给出一些视频上传用户表表中电话号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1234567890",
                "0987654321",
                "1112223334",
                "4445556667",
                "7778889990",
                "0001112223",
                "3334445556",
                "6667778889",
                "9990001112",
                "2223334445",
                "5556667778",
                "8889990001",
                "1357924680",
                "2468013579",
                "9876543210",
                "0123456789",
                "1029384756",
                "2130495867",
                "3241506978",
                "4352617089",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.上传时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "上传时间":

        # 载入配置成功
        # 给出一些视频上传用户表表中上传时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:15:30",
                "2023-03-15 11:30:45",
                "2023-03-15 12:45:15",
                "2023-03-15 14:00:00",
                "2023-03-15 15:15:30",
                "2023-03-15 16:30:45",
                "2023-03-15 17:45:15",
                "2023-03-16 08:00:00",
                "2023-03-16 09:15:30",
                "2023-03-16 10:30:45",
                "2023-03-16 11:45:15",
                "2023-03-16 13:00:00",
                "2023-03-16 14:15:30",
                "2023-03-16 15:30:45",
                "2023-03-16 16:45:15",
                "2023-03-17 07:00:00",
                "2023-03-17 08:15:30",
                "2023-03-17 09:30:45",
                "2023-03-17 10:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.视频ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频上传用户表.视频标题 <CharField>
    #

    if mcfieldnamezh == "视频标题":

        # 载入配置成功
        # 给出一些视频上传用户表表中视频标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "示例视频1",
                "示例视频2",
                "测试视频3",
                "教学视频4",
                "电影片段5",
                "旅行记录6",
                "美食分享7",
                "健身教程8",
                "游戏直播9",
                "动物世界10",
                "音乐MV11",
                "科技前沿12",
                "历史回顾13",
                "艺术欣赏14",
                "时尚穿搭15",
                "汽车评测16",
                "房产介绍17",
                "教育讲座18",
                "娱乐八卦19",
                "生活小妙招20",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.视频描述 <TextField>
    #

    if mcfieldnamezh == "视频描述":

        # 载入配置成功
        # 给出一些视频上传用户表表中视频描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "这是一个关于旅行风景的视频描述，展示了美丽的海滩和日落。",
                "这个视频描述了最新的科技产品发布会，包括各种创新功能和设计。",
                "烹饪爱好者必看！这个视频描述了如何制作美味的意大利面，包含详细的步骤和技巧。",
                "音乐爱好者不容错过！这个视频描述了最新的音乐会和歌手的现场表演。",
                "这个视频是关于健身的，介绍了如何在家中进行有效的全身锻炼。",
                "孩子们的最爱！这个视频描述了一个有趣的童话故事，带有生动的动画和声音。",
                "探索未知的世界！这个视频描述了深海探险的惊险和美丽。",
                "这个视频是关于历史的，讲述了二战期间的重要战役和事件。",
                "时尚达人必看！这个视频描述了最新的时尚趋势和流行单品。",
                "这个视频是关于自然保护的，强调了保护环境和野生动物的重要性。",
                "学习新技能！这个视频介绍了如何编程和创建自己的网站。",
                "这个视频是关于摄影的，分享了拍摄美丽风景的技巧和策略。",
                "感受大自然的魅力！这个视频描述了登山和徒步旅行的乐趣和挑战。",
                "这个视频是关于汽车的，介绍了最新的汽车技术和驾驶体验。",
                "探索宇宙的奥秘！这个视频描述了太空探索和宇宙的壮丽景色。",
                "这个视频是关于艺术的，展示了各种绘画和雕塑作品。",
                "了解不同文化！这个视频描述了世界各地的节日和传统。",
                "这个视频是关于动物的，介绍了各种珍稀动物的生活习性和栖息地。",
                "享受美食之旅！这个视频描述了世界各地的美食和烹饪文化。",
                "这个视频是关于旅游的，推荐了全球最受欢迎的旅游目的地和景点。",
            )
        )

        val = loadvalue

        return val
    # 视频上传用户表.视频分类ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频分类ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频上传用户表.视频状态如审核中、已发布、已删除 <CharField>
    #

    if mcfieldnamezh == "视频状态如审核中、已发布、已删除":

        # 给出一些视频上传用户表表中视频状态如审核中、已发布、已删除的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 用户信息表

    # 用户信息表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 用户信息表.用户名 <CharField>
    #

    if mcfieldnamezh == "用户名":

        # 载入配置成功
        # 给出一些用户信息表表中用户名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "Alice",
                "Bob",
                "Charlie",
                "David",
                "Eve",
                "Frank",
                "Grace",
                "Henry",
                "Ivy",
                "John",
                "Kate",
                "Larry",
                "Mary",
                "Nick",
                "Olivia",
                "Peter",
                "Quincy",
                "Rachel",
                "Sam",
                "Tom",
                "Alice",
                "Bob",
                "Charlie",
                "David",
                "Eve",
                "Frank",
                "Grace",
                "Henry",
                "Ivy",
                "John",
                "Kate",
                "Larry",
                "Mary",
                "Nick",
                "Olivia",
                "Peter",
                "Quincy",
                "Rachel",
                "Sam",
                "Tom",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.用户邮箱 <EmailField>
    #

    if mcfieldnamezh == "用户邮箱":

        # 载入配置成功
        # 给出一些用户信息表表中用户邮箱的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "user1@example.com",
                "user2@example.com",
                "user3@example.com",
                "user4@example.com",
                "user5@example.com",
                "user6@example.com",
                "user7@example.com",
                "user8@example.com",
                "user9@example.com",
                "user10@example.com",
                "user11@example.com",
                "user12@example.com",
                "user13@example.com",
                "user14@example.com",
                "user15@example.com",
                "user16@example.com",
                "user17@example.com",
                "user18@example.com",
                "user19@example.com",
                "user20@example.com",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.用户密码 <CharField>
    #

    if mcfieldnamezh == "用户密码":

        # 载入配置成功
        # 给出一些用户信息表表中用户密码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "Password1234567890abcdefghij",
                "qwertyuiopasdfghjklzxcvbnm",
                "1qaz2wsx3edc4rfv5tgb6yhn7ujm",
                "MyLongAndSecurePassword12345",
                "SecurePassword!WithNumbers123",
                "LongPasswordExampleForDemo",
                "ThisIsASecurePasswordExample",
                "DemoPasswordWithSpecialChars@",
                "SecureDemoPassword1234567890",
                "DemoPasswordWithLettersAndNums",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.电话号码 <CharField>
    #

    if mcfieldnamezh == "电话号码":

        # 载入配置成功
        # 给出一些用户信息表表中电话号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1234567890",
                "0987654321",
                "1112223334",
                "4445556667",
                "7778889990",
                "0001112223",
                "3334445556",
                "6667778889",
                "9990001112",
                "2223334445",
                "5556667778",
                "8889990001",
                "1357924680",
                "2468013579",
                "9876543210",
                "0123456789",
                "1029384756",
                "2130495867",
                "3241506978",
                "4352617089",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.性别 <CharField>
    #

    if mcfieldnamezh == "性别":

        # 载入配置成功
        # 给出一些用户信息表表中性别的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "男",
                "女",
                "未知",
                "其他",
                "保密",
                "不透露",
                "未选择",
                "不适用",
                "跨性别",
                "双性",
                "无性别",
                "第三性别",
                "多性别",
                "两性",
                "性别流动",
                "性别中立",
                "性别疑问",
                "性别酷儿",
                "性别非二元",
                "性别多样",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.出生日期 <DateField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "出生日期":

        # 载入配置成功
        # 给出一些用户信息表表中出生日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1990-01-01",
                "1991-02-14",
                "1992-03-15",
                "1993-04-20",
                "1994-05-25",
                "1995-06-30",
                "1996-07-07",
                "1997-08-15",
                "1998-09-21",
                "1999-10-28",
                "2000-11-11",
                "2001-12-24",
                "2002-01-31",
                "2003-02-28",
                "2004-03-16",
                "2005-04-23",
                "2006-05-09",
                "2007-06-17",
                "2008-07-25",
                "2009-08-12",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.注册日期 <DateField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "注册日期":

        # 载入配置成功
        # 给出一些用户信息表表中注册日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23",
                "2023-10-24",
                "2023-10-25",
                "2023-10-26",
                "2023-10-27",
                "2023-10-28",
                "2023-10-29",
                "2023-10-30",
                "2023-10-31",
                "2023-11-01",
                "2023-11-02",
                "2023-11-03",
                "2023-11-04",
                "2023-11-05",
                "2023-11-06",
                "2023-11-07",
                "2023-11-08",
                "2023-11-09",
                "2023-11-10",
                "2023-11-11",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.用户角色 <CharField>
    #

    if mcfieldnamezh == "用户角色":

        # 载入配置成功
        # 给出一些用户信息表表中用户角色的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "管理员",
                "普通用户",
                "编辑",
                "访客",
                "超级管理员",
                "数据分析师",
                "内容创作者",
                "审核员",
                "技术支持",
                "市场专员",
                "财务",
                "客服",
                "实习生",
                "合作伙伴",
                "VIP用户",
                "高级用户",
                "社区管理员",
                "论坛版主",
                "测试员",
                "系统维护员",
            )
        )

        val = loadvalue

        return val
    # 用户信息表.最后登录时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "最后登录时间":

        # 载入配置成功
        # 给出一些用户信息表表中最后登录时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 08:00:00",
                "2023-10-22 15:30:45",
                "2023-10-21 22:15:12",
                "2023-10-20 10:45:30",
                "2023-10-19 18:30:00",
                "2023-10-18 12:00:45",
                "2023-10-17 09:15:30",
                "2023-10-16 16:45:15",
                "2023-10-15 23:30:00",
                "2023-10-14 17:15:45",
                "2023-10-13 11:00:30",
                "2023-10-12 08:45:15",
                "2023-10-11 15:30:00",
                "2023-10-10 22:15:45",
                "2023-10-09 16:00:30",
                "2023-10-08 10:45:15",
                "2023-10-07 18:30:00",
                "2023-10-06 13:15:45",
                "2023-10-05 07:00:30",
                "2023-10-04 20:45:15",
            )
        )

        val = loadvalue

        return val
    # 用户权限表

    # 用户权限表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 用户权限表.关联权限ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联权限ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 用户权限表.角色名称 <CharField>
    #

    if mcfieldnamezh == "角色名称":

        # 载入配置成功
        # 给出一些用户权限表表中角色名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "角色1",
                "角色2",
                "角色3",
                "角色4",
                "角色5",
                "角色6",
                "角色7",
                "角色8",
                "角色9",
                "角色10",
                "角色11",
                "角色12",
                "角色13",
                "角色14",
                "角色15",
                "角色16",
                "角色17",
                "角色18",
                "角色19",
                "角色20",
            )
        )

        val = loadvalue

        return val
    # 用户权限表.权限名称 <CharField>
    #

    if mcfieldnamezh == "权限名称":

        # 载入配置成功
        # 给出一些用户权限表表中权限名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "读取权限",
                "写入权限",
                "编辑权限",
                "删除权限",
                "查看报告",
                "导出数据",
                "导入数据",
                "管理用户",
                "配置设置",
                "发送通知",
                "审核内容",
                "发布内容",
                "禁用账户",
                "启用账户",
                "重置密码",
                "访问后台",
                "查看日志",
                "下载文件",
                "上传文件",
                "执行命令",
            )
        )

        val = loadvalue

        return val
    # 用户权限表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些用户权限表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 用户权限表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些用户权限表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 用户权限表.是否激活 <BooleanField>
    #

    if mcfieldnamezh == "是否激活":

        val = faker.random.choice(("1", "0"))

        return val
    # 用户权限表.描述 <TextField>
    #

    if mcfieldnamezh == "描述":

        # 载入配置成功
        # 给出一些用户权限表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "字段1描述",
                "字段2描述",
                "字段3详细信息",
                "列4的用途",
                "数据5的含义",
                "特性6的说明",
                "属性7的注解",
                "值8的上下文",
                "列9的用途说明",
                "字段10的简短描述",
                "列11的详细解释",
                "数据12的用途",
                "特性13的简短说明",
                "属性14的详细描述",
                "值15的上下文解释",
                "字段16的用途",
                "列17的额外信息",
                "数据18的备注",
                "字段19的用途描述",
                "列20的简短注解",
            )
        )

        val = loadvalue

        return val
    # 用户观看历史表

    # 用户观看历史表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 用户观看历史表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 用户观看历史表.观看时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "观看时间":

        # 载入配置成功
        # 给出一些用户观看历史表表中观看时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "08:30:00",
                "09:15:45",
                "10:45:12",
                "12:00:00",
                "13:30:15",
                "14:45:30",
                "16:15:45",
                "17:45:00",
                "19:00:15",
                "20:30:30",
                "21:45:45",
                "23:15:00",
                "00:45:15",
                "02:15:30",
                "03:45:45",
                "05:15:00",
                "06:45:15",
                "07:30:30",
                "08:15:45",
                "09:00:00",
            )
        )

        val = loadvalue

        return val
    # 用户观看历史表.观看时长 <CharField>
    #

    if mcfieldnamezh == "观看时长":

        # 载入配置成功
        # 给出一些用户观看历史表表中观看时长的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "00:05:30",
                "01:23:45",
                "02:10:15",
                "03:45:00",
                "04:30:20",
                "05:15:30",
                "06:40:15",
                "07:25:45",
                "08:10:59",
                "09:35:15",
                "10:20:30",
                "11:05:45",
                "12:30:00",
                "13:15:15",
                "14:40:30",
                "15:25:45",
                "16:10:59",
                "17:35:15",
                "18:20:30",
                "19:05:45",
            )
        )

        val = loadvalue

        return val
    # 用户观看历史表.观看状态如已观看、观看中、暂停、已放弃 <CharField>
    #

    if mcfieldnamezh == "观看状态如已观看、观看中、暂停、已放弃":

        # 给出一些用户观看历史表表中观看状态如已观看、观看中、暂停、已放弃的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 用户观看历史表.评分可选用户对该视频的评分 <IntegerField>
    #

    if mcfieldnamezh == "评分可选用户对该视频的评分":

        val = faker.random.randint(1, 100)

        return val
    # 用户观看历史表.评论可选用户对该视频的评论 <TextField>
    #

    if mcfieldnamezh == "评论可选用户对该视频的评论":

        # 给出一些用户观看历史表表中评论可选用户对该视频的评论的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 用户观看历史表.点赞状态如已点赞、未点赞 <CharField>
    #

    if mcfieldnamezh == "点赞状态如已点赞、未点赞":

        # 给出一些用户观看历史表表中点赞状态如已点赞、未点赞的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 用户观看历史表.分享状态如已分享、未分享 <CharField>
    #

    if mcfieldnamezh == "分享状态如已分享、未分享":

        # 给出一些用户观看历史表表中分享状态如已分享、未分享的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 用户观看历史表.收藏状态如已收藏、未收藏 <CharField>
    #

    if mcfieldnamezh == "收藏状态如已收藏、未收藏":

        # 给出一些用户观看历史表表中收藏状态如已收藏、未收藏的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频审核状态表

    # 视频审核状态表.视频ID关联字段指向视频的ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联字段指向视频的ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频审核状态表.审核状态如待审核、审核通过、审核拒绝 <CharField>
    #

    if mcfieldnamezh == "审核状态如待审核、审核通过、审核拒绝":

        # 给出一些视频审核状态表表中审核状态如待审核、审核通过、审核拒绝的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频审核状态表.审核员ID关联字段指向审核员的ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "审核员ID关联字段指向审核员的ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频审核状态表.审核时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "审核时间":

        # 载入配置成功
        # 给出一些视频审核状态表表中审核时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:30:00",
                "2023-10-24 12:45:15",
                "2023-10-25 14:15:30",
                "2023-10-26 08:00:00",
                "2023-10-27 10:30:45",
                "2023-10-28 13:15:10",
                "2023-10-29 16:00:00",
                "2023-10-30 18:30:15",
                "2023-10-31 21:00:30",
                "2023-11-01 00:15:00",
                "2023-11-02 03:30:00",
                "2023-11-03 06:45:15",
                "2023-11-04 09:00:00",
                "2023-11-05 11:30:45",
                "2023-11-06 14:15:10",
                "2023-11-07 16:45:00",
                "2023-11-08 19:15:15",
                "2023-11-09 21:45:30",
                "2023-11-10 00:30:00",
                "2023-11-11 03:00:00",
            )
        )

        val = loadvalue

        return val
    # 视频审核状态表.拒绝原因如果状态为审核拒绝则记录拒绝的具体原因 <CharField>
    #

    if mcfieldnamezh == "拒绝原因如果状态为审核拒绝则记录拒绝的具体原因":

        # 给出一些视频审核状态表表中拒绝原因如果状态为审核拒绝则记录拒绝的具体原因的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频审核状态表.审核备注 <CharField>
    #

    if mcfieldnamezh == "审核备注":

        # 载入配置成功
        # 给出一些视频审核状态表表中审核备注的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "备注1",
                "备注2",
                "这是第三个备注",
                "第四个备注内容",
                "第五个备注",
                "第六个备注示例",
                "第七个备注信息",
                "第八个备注描述",
                "第九个备注点",
                "第十个备注项",
                "第十一个备注内容",
                "第十二个备注点",
                "第十三项备注",
                "第十四条备注",
                "第十五点备注",
                "第十六项审核备注",
                "第十七条备注信息",
                "第十八点备注",
                "第十九个备注项",
                "第二十个备注内容",
            )
        )

        val = loadvalue

        return val
    # 视频审核状态表.是否最终审核标记该审核是否为最终审核结果 <BooleanField>
    #

    if mcfieldnamezh == "是否最终审核标记该审核是否为最终审核结果":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频审核状态表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频审核状态表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频审核状态表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频审核状态表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频封面图片表

    # 视频封面图片表.视频ID关联字段指向视频的 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联字段指向视频的":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.封面图片URL <ImageField>
    #

    if mcfieldnamezh == "封面图片URL":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.图片格式 <ImageField>
    #

    if mcfieldnamezh == "图片格式":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.图片大小单位KB <ImageField>
    #

    if mcfieldnamezh == "图片大小单位KB":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.上传时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "上传时间":

        # 载入配置成功
        # 给出一些视频封面图片表表中上传时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:15:30",
                "2023-03-15 11:30:45",
                "2023-03-15 12:45:15",
                "2023-03-15 14:00:00",
                "2023-03-15 15:15:30",
                "2023-03-15 16:30:45",
                "2023-03-15 17:45:15",
                "2023-03-16 08:00:00",
                "2023-03-16 09:15:30",
                "2023-03-16 10:30:45",
                "2023-03-16 11:45:15",
                "2023-03-16 13:00:00",
                "2023-03-16 14:15:30",
                "2023-03-16 15:30:45",
                "2023-03-16 16:45:15",
                "2023-03-17 07:00:00",
                "2023-03-17 08:15:30",
                "2023-03-17 09:30:45",
                "2023-03-17 10:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频封面图片表.创建者ID关联字段指向用户的 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者ID关联字段指向用户的":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.状态例如有效、无效、待审核 <CharField>
    #

    if mcfieldnamezh == "状态例如有效、无效、待审核":

        # 给出一些视频封面图片表表中状态例如有效、无效、待审核的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频封面图片表.图片描述 <ImageField>
    #

    if mcfieldnamezh == "图片描述":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频封面图片表.是否为默认封面kwTruekwFalse <BooleanField>
    #

    if mcfieldnamezh == "是否为默认封面kwTruekwFalse":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频矩阵配置表

    # 视频矩阵配置表.视频矩阵名称 <CharField>
    #

    if mcfieldnamezh == "视频矩阵名称":

        # 给出一些视频矩阵配置表表中视频矩阵名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频矩阵配置表.描述信息 <TextField>
    #

    if mcfieldnamezh == "描述信息":

        # 载入配置成功
        # 给出一些视频矩阵配置表表中描述信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "姓名",
                "年龄",
                "性别",
                "生日",
                "地址",
                "邮编",
                "电话",
                "电子邮件",
                "职业",
                "学历",
                "公司名",
                "部门",
                "职位",
                "入职日期",
                "离职日期",
                "薪资",
                "工作内容",
                "技能",
                "兴趣爱好",
                "备注",
                "CREATE TABLE employees (",
                "姓名 VARCHAR(50)",
                "年龄 INT",
                "性别 VARCHAR(10)",
                "-- ... 其他字段定义 ...",
                "备注 TEXT",
                ");",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵配置表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频矩阵配置表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵配置表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频矩阵配置表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵配置表.视频源ID关联视频源 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频源ID关联视频源":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵配置表.输出通道ID关联输出通道 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "输出通道ID关联输出通道":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵配置表.布局配置如1x4 <CharField>
    #

    if mcfieldnamezh == "布局配置如1x4":

        # 给出一些视频矩阵配置表表中布局配置如1x4的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频矩阵配置表.是否激活用于控制视频矩阵的启用状态 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于控制视频矩阵的启用状态":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频矩阵节点表

    # 视频矩阵节点表.节点名称 <CharField>
    #

    if mcfieldnamezh == "节点名称":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中节点名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "节点1",
                "节点2",
                "节点3",
                "节点4",
                "节点5",
                "节点6",
                "节点7",
                "节点8",
                "节点9",
                "节点10",
                "节点11",
                "节点12",
                "节点13",
                "节点14",
                "节点15",
                "节点16",
                "节点17",
                "节点18",
                "节点19",
                "节点20",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵节点表.关联视频源ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频源ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵节点表.视频格式 <CharField>
    #

    if mcfieldnamezh == "视频格式":

        # 给出一些视频矩阵节点表表中视频格式的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频矩阵节点表.分辨率 <CharField>
    #

    if mcfieldnamezh == "分辨率":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中分辨率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1920x1080",
                "1366x768",
                "1280x800",
                "1600x900",
                "1440x900",
                "1024x768",
                "800x600",
                "3840x2160",
                "2560x1440",
                "2048x1152",
                "1680x1050",
                "1280x720",
                "768x1366",
                "576x1024",
                "480x800",
                "320x240",
                "1080x1920",
                "900x1600",
                "720x1280",
                "640x480",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵节点表.状态如在线、离线、维护中 <CharField>
    #

    if mcfieldnamezh == "状态如在线、离线、维护中":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中状态如在线、离线、维护中的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "在线",
                "离线",
                "维护中",
                "暂停",
                "重启中",
                "待机",
                "忙碌",
                "空闲",
                "不可用",
                "测试中",
                "升级中",
                "维护完成",
                "重启完成",
                "待上线",
                "已下线",
                "已恢复",
                "已暂停",
                "已重启",
                "已升级",
                "已测试",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵节点表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵节点表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵节点表.关联父节点ID用于示节点之间的层级关系 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联父节点ID用于示节点之间的层级关系":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵节点表.描述信息 <TextField>
    #

    if mcfieldnamezh == "描述信息":

        # 载入配置成功
        # 给出一些视频矩阵节点表表中描述信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "姓名",
                "年龄",
                "性别",
                "生日",
                "地址",
                "邮编",
                "电话",
                "电子邮件",
                "职业",
                "学历",
                "公司名",
                "部门",
                "职位",
                "入职日期",
                "离职日期",
                "薪资",
                "工作内容",
                "技能",
                "兴趣爱好",
                "备注",
                "CREATE TABLE employees (",
                "姓名 VARCHAR(50)",
                "年龄 INT",
                "性别 VARCHAR(10)",
                "-- ... 其他字段定义 ...",
                "备注 TEXT",
                ");",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵播放记录表

    # 视频矩阵播放记录表.视频ID关联视频 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联视频":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵播放记录表.矩阵ID关联视频矩阵 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "矩阵ID关联视频矩阵":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵播放记录表.播放时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "播放时间":

        # 载入配置成功
        # 给出一些视频矩阵播放记录表表中播放时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 10:00:00",
                "2023-10-23 12:30:15",
                "2023-10-23 15:45:30",
                "2023-10-23 18:15:45",
                "2023-10-24 09:30:00",
                "2023-10-24 11:45:15",
                "2023-10-24 14:00:30",
                "2023-10-24 16:30:45",
                "2023-10-25 10:15:00",
                "2023-10-25 12:45:15",
                "2023-10-25 15:15:30",
                "2023-10-25 17:45:45",
                "2023-10-26 09:45:00",
                "2023-10-26 12:15:15",
                "2023-10-26 14:45:30",
                "2023-10-26 17:15:45",
                "2023-10-27 10:30:00",
                "2023-10-27 13:00:15",
                "2023-10-27 15:30:30",
                "2023-10-27 18:00:45",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵播放记录表.播放时长秒 <CharField>
    #

    if mcfieldnamezh == "播放时长秒":

        # 载入配置成功
        # 给出一些视频矩阵播放记录表表中播放时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "120",
                "180",
                "240",
                "300",
                "360",
                "420",
                "480",
                "540",
                "600",
                "660",
                "720",
                "780",
                "840",
                "900",
                "960",
                "1020",
                "1080",
                "1140",
                "1200",
                "1260",
            )
        )

        val = loadvalue

        return val
    # 视频矩阵播放记录表.用户ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "用户ID关联用户":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵播放记录表.设备ID关联设备 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "设备ID关联设备":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频矩阵播放记录表.播放状态如成功、失败、中断等 <CharField>
    #

    if mcfieldnamezh == "播放状态如成功、失败、中断等":

        # 给出一些视频矩阵播放记录表表中播放状态如成功、失败、中断等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频矩阵播放记录表.播放请求的IP地址 <TextField>
    #

    if mcfieldnamezh == "播放请求的IP地址":

        # 给出一些视频矩阵播放记录表表中播放请求的IP地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频关联内容表

    # 视频关联内容表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频关联内容表.关联内容ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联内容ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频关联内容表.内容类型 <TextField>
    #

    if mcfieldnamezh == "内容类型":

        # 载入配置成功
        # 给出一些视频关联内容表表中内容类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "文章",
                "视频",
                "音频",
                "图片",
                "文档",
                "PDF",
                "电子书",
                "教程",
                "演示文稿",
                "代码",
                "邮件",
                "社交媒体帖子",
                "评论",
                "广告",
                "新闻",
                "博客",
                "产品描述",
                "用户反馈",
                "调查问卷",
                "研究论文",
            )
        )

        val = loadvalue

        return val
    # 视频关联内容表.关联时间 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联时间":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频关联内容表.描述 <TextField>
    #

    if mcfieldnamezh == "描述":

        # 载入配置成功
        # 给出一些视频关联内容表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "字段1描述",
                "字段2描述",
                "字段3详细信息",
                "列4的用途",
                "数据5的含义",
                "特性6的说明",
                "属性7的注解",
                "值8的上下文",
                "列9的用途说明",
                "字段10的简短描述",
                "列11的详细解释",
                "数据12的用途",
                "特性13的简短说明",
                "属性14的详细描述",
                "值15的上下文解释",
                "字段16的用途",
                "列17的额外信息",
                "数据18的备注",
                "字段19的用途描述",
                "列20的简短注解",
            )
        )

        val = loadvalue

        return val
    # 视频关联内容表.状态 <CharField>
    #

    if mcfieldnamezh == "状态":

        # 载入配置成功
        # 给出一些视频关联内容表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "待处理",
                "已处理",
                "处理中",
                "已完成",
                "已取消",
                "待审核",
                "审核通过",
                "审核失败",
                "待发货",
                "已发货",
                "运输中",
                "已签收",
                "退货中",
                "已退货",
                "退款中",
                "已退款",
                "待支付",
                "已支付",
                "支付失败",
                "未知状态",
            )
        )

        val = loadvalue

        return val
    # 视频关联内容表.关联创建者ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联创建者ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频关联内容表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频关联内容表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频关联内容表.修改时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "修改时间":

        # 载入配置成功
        # 给出一些视频关联内容表表中修改时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:00:00Z",
                "2023-10-23T09:15:30Z",
                "2023-10-23T09:30:45Z",
                "2023-10-23T09:45:15Z",
                "2023-10-23T10:00:00Z",
                "2023-10-23T10:15:30Z",
                "2023-10-23T10:30:45Z",
                "2023-10-23T10:45:15Z",
                "2023-10-23T11:00:00Z",
                "2023-10-23T11:15:30Z",
                "2023-10-23T11:30:45Z",
                "2023-10-23T11:45:15Z",
                "2023-10-23T12:00:00Z",
                "2023-10-23T12:15:30Z",
                "2023-10-23T12:30:45Z",
                "2023-10-23T12:45:15Z",
                "2023-10-23T13:00:00Z",
                "2023-10-23T13:15:30Z",
                "2023-10-23T13:30:45Z",
                "2023-10-23T13:45:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频关联内容表.视频名称关联字段视频名假设为VideoTable关联字段为视频名称 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频名称关联字段视频名假设为VideoTable关联字段为视频名称":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频错误日志表

    # 视频错误日志表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频错误日志表.错误类型 <CharField>
    #

    if mcfieldnamezh == "错误类型":

        # 载入配置成功
        # 给出一些视频错误日志表表中错误类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "系统错误",
                "配置错误",
                "网络错误",
                "数据库错误",
                "权限错误",
                "认证错误",
                "参数错误",
                "文件读写错误",
                "超时错误",
                "依赖服务错误",
                "资源不足错误",
                "格式错误",
                "类型错误",
                "编码错误",
                "逻辑错误",
                "业务规则错误",
                "第三方接口错误",
                "数据校验错误",
                "版本不兼容错误",
                "未知错误",
            )
        )

        val = loadvalue

        return val
    # 视频错误日志表.错误描述 <TextField>
    #

    if mcfieldnamezh == "错误描述":

        # 给出一些视频错误日志表表中错误描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频错误日志表.错误时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "错误时间":

        # 载入配置成功
        # 给出一些视频错误日志表表中错误时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-09-17 10:00:01",
                "2023-09-17 11:15:30",
                "2023-09-17 12:30:45",
                "2023-09-17 13:45:12",
                "2023-09-17 15:00:07",
                "2023-09-17 16:15:23",
                "2023-09-17 17:30:59",
                "2023-09-17 18:45:18",
                "2023-09-18 09:00:02",
                "2023-09-18 10:15:31",
                "2023-09-18 11:30:46",
                "2023-09-18 12:45:13",
                "2023-09-18 14:00:08",
                "2023-09-18 15:15:24",
                "2023-09-18 16:30:00",
                "2023-09-18 17:45:19",
                "2023-09-19 08:00:03",
                "2023-09-19 09:15:32",
                "2023-09-19 10:30:47",
                "2023-09-19 11:45:14",
            )
        )

        val = loadvalue

        return val
    # 视频错误日志表.是否已解决 <BooleanField>
    #

    if mcfieldnamezh == "是否已解决":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频错误日志表.解决时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "解决时间":

        # 载入配置成功
        # 给出一些视频错误日志表表中解决时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 10:00:00",
                "2023-10-23 11:30:15",
                "2023-10-23 13:45:20",
                "2023-10-23 15:10:30",
                "2023-10-24 09:05:00",
                "2023-10-24 12:20:10",
                "2023-10-24 14:35:25",
                "2023-10-24 16:50:30",
                "2023-10-25 10:15:00",
                "2023-10-25 11:40:15",
                "2023-10-25 13:55:20",
                "2023-10-25 15:20:30",
                "2023-10-26 09:35:00",
                "2023-10-26 12:10:10",
                "2023-10-26 14:25:25",
                "2023-10-26 16:40:30",
                "2023-10-27 10:55:00",
                "2023-10-27 12:30:15",
                "2023-10-27 14:45:20",
                "2023-10-27 17:00:30",
            )
        )

        val = loadvalue

        return val
    # 视频错误日志表.关联解决人 <SelectField>
    #

    if mcfieldnamezh == "关联解决人":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频错误日志表.设备信息 <CharField>
    #

    if mcfieldnamezh == "设备信息":

        # 载入配置成功
        # 给出一些视频错误日志表表中设备信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "设备ID",
                "设备名称",
                "设备型号",
                "设备序列号",
                "设备状态",
                "设备位置",
                "设备制造商",
                "购买日期",
                "保修期限",
                "设备价值",
                "负责人",
                "联系电话",
                "IP地址",
                "MAC地址",
                "操作系统",
                "软件版本",
                "最后维护日期",
                "维护人员",
                "备注信息",
                "更新时间",
            )
        )

        val = loadvalue

        return val
    # 视频错误日志表.客户端IP <CharField>
    #

    if mcfieldnamezh == "客户端IP":

        # 载入配置成功
        # 给出一些视频错误日志表表中客户端IP的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "192.168.1.1",
                "10.0.0.1",
                "172.16.0.1",
                "127.0.0.1",
                "8.8.8.8",
                "8.8.4.4",
                "1.1.1.1",
                "2.2.2.2",
                "3.3.3.3",
                "4.4.4.4",
                "5.5.5.5",
                "6.6.6.6",
                "7.7.7.7",
                "9.9.9.9",
                "11.11.11.11",
                "12.12.12.12",
                "13.13.13.13",
                "14.14.14.14",
                "15.15.15.15",
                "16.16.16.16",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表

    # 视频热度统计表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频热度统计表.观看次数 <CharField>
    #

    if mcfieldnamezh == "观看次数":

        # 载入配置成功
        # 给出一些视频热度统计表表中观看次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "1234",
                "567",
                "890",
                "123",
                "45",
                "67",
                "89",
                "10",
                "111",
                "222",
                "333",
                "444",
                "555",
                "666",
                "777",
                "888",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.点赞次数 <CharField>
    #

    if mcfieldnamezh == "点赞次数":

        # 载入配置成功
        # 给出一些视频热度统计表表中点赞次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "12",
                "34",
                "56",
                "78",
                "90",
                "11",
                "22",
                "33",
                "44",
                "55",
                "66",
                "77",
                "88",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.分享次数 <CharField>
    #

    if mcfieldnamezh == "分享次数":

        # 载入配置成功
        # 给出一些视频热度统计表表中分享次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "5",
                "12",
                "8",
                "3",
                "15",
                "9",
                "7",
                "11",
                "4",
                "6",
                "10",
                "1",
                "14",
                "2",
                "13",
                "16",
                "20",
                "18",
                "17",
                "19",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.评论次数 <TextField>
    #

    if mcfieldnamezh == "评论次数":

        # 载入配置成功
        # 给出一些视频热度统计表表中评论次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.热度评分 <IntegerField>
    #

    if mcfieldnamezh == "热度评分":

        val = faker.random.randint(1, 100)

        return val
    # 视频热度统计表.发布时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "发布时间":

        # 载入配置成功
        # 给出一些视频热度统计表表中发布时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
                "2023-10-25 10:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频热度统计表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频热度统计表.关联类别ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联类别ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频热度统计表.关联创作者ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联创作者ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频推荐算法参数表

    # 视频推荐算法参数表.算法名称 <CharField>
    #

    if mcfieldnamezh == "算法名称":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中算法名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "算法1",
                "算法2",
                "算法3",
                "算法4",
                "算法5",
                "算法6",
                "算法7",
                "算法8",
                "算法9",
                "算法10",
                "算法11",
                "算法12",
                "算法13",
                "算法14",
                "算法15",
                "算法16",
                "算法17",
                "算法18",
                "算法19",
                "算法20",
                "SELECT * FROM 算法表 WHERE 算法名称 IN (算法1",
                "算法2",
                "算法3",
                "算法4",
                "算法5",
                "算法6",
                "算法7",
                "算法8",
                "算法9",
                "算法10",
                "算法11",
                "算法12",
                "算法13",
                "算法14",
                "算法15",
                "算法16",
                "算法17",
                "算法18",
                "算法19",
                "算法20);",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.参数名称 <CharField>
    #

    if mcfieldnamezh == "参数名称":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中参数名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "参数1",
                "参数2",
                "参数3",
                "参数4",
                "参数5",
                "参数6",
                "参数7",
                "参数8",
                "参数9",
                "参数10",
                "参数11",
                "参数12",
                "参数13",
                "参数14",
                "参数15",
                "参数16",
                "参数17",
                "参数18",
                "参数19",
                "参数20",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.参数值 <CharField>
    #

    if mcfieldnamezh == "参数值":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中参数值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "参数1",
                "参数2",
                "参数3",
                "参数4",
                "参数5",
                "参数6",
                "参数7",
                "参数8",
                "参数9",
                "参数10",
                "参数11",
                "参数12",
                "参数13",
                "参数14",
                "参数15",
                "参数16",
                "参数17",
                "参数18",
                "参数19",
                "参数20",
                "SELECT * FROM my_table WHERE id IN (参数1",
                "参数2",
                "参数3",
                "参数4",
                "参数5",
                "参数6",
                "参数7",
                "参数8",
                "参数9",
                "参数10",
                "参数11",
                "参数12",
                "参数13",
                "参数14",
                "参数15",
                "参数16",
                "参数17",
                "参数18",
                "参数19",
                "参数20);",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.参数描述 <TextField>
    #

    if mcfieldnamezh == "参数描述":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中参数描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "用户ID",
                "用户名",
                "密码哈希",
                "电子邮件地址",
                "手机号码",
                "注册日期",
                "最后登录时间",
                "用户状态",
                "性别",
                "出生日期",
                "地址",
                "邮编",
                "国家",
                "城市",
                "职业",
                "收入范围",
                "兴趣爱好",
                "头像URL",
                "个性签名",
                "备注信息",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频推荐算法参数表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频推荐算法参数表.是否启用 <BooleanField>
    #

    if mcfieldnamezh == "是否启用":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频推荐算法参数表.视频类型ID关联字段指向视频类型 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频类型ID关联字段指向视频类型":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表

    # 视频广告信息表.视频广告ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频广告ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表.广告标题 <CharField>
    #

    if mcfieldnamezh == "广告标题":

        # 载入配置成功
        # 给出一些视频广告信息表表中广告标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "广告1：限时优惠",
                "广告2：新品上市",
                "广告3：独家折扣",
                "广告4：满减活动",
                "广告5：会员专享",
                "广告6：品质生活",
                "广告7：健康食品",
                "广告8：时尚穿搭",
                "广告9：旅行必备",
                "广告10：智能家居",
                "广告11：科技新品",
                "广告12：美妆护肤",
                "广告13：儿童用品",
                "广告14：游戏周边",
                "广告15：图书推荐",
                "广告16：电影票务",
                "广告17：餐饮优惠",
                "广告18：汽车保养",
                "广告19：运动装备",
                "广告20：珠宝饰品",
            )
        )

        val = loadvalue

        return val
    # 视频广告信息表.广告描述 <TextField>
    #

    if mcfieldnamezh == "广告描述":

        # 给出一些视频广告信息表表中广告描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频广告信息表.开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "开始时间":

        # 载入配置成功
        # 给出一些视频广告信息表表中开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-01-01 00:00:00",
                "2023-01-02 12:34:56",
                "2023-01-03 23:59:59",
                "2023-01-04 08:00:00",
                "2023-01-05 14:15:16",
                "2023-01-06 09:30:00",
                "2023-01-07 11:00:00",
                "2023-01-08 17:45:00",
                "2023-01-09 10:20:30",
                "2023-01-10 19:00:00",
                "2023-01-11 13:15:45",
                "2023-01-12 22:45:00",
                "2023-01-13 01:30:00",
                "2023-01-14 16:00:00",
                "2023-01-15 04:45:00",
                "2023-01-16 18:30:00",
                "2023-01-17 07:15:00",
                "2023-01-18 20:45:00",
                "2023-01-19 06:00:00",
                "2023-01-20 15:00:00",
            )
        )

        val = loadvalue

        return val
    # 视频广告信息表.结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "结束时间":

        # 载入配置成功
        # 给出一些视频广告信息表表中结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 10:00:00",
                "2023-10-23 12:30:15",
                "2023-10-23 15:45:30",
                "2023-10-24 08:15:00",
                "2023-10-24 11:00:45",
                "2023-10-24 13:30:15",
                "2023-10-25 09:45:30",
                "2023-10-25 12:15:00",
                "2023-10-25 14:45:15",
                "2023-10-26 10:30:00",
                "2023-10-26 13:00:45",
                "2023-10-26 15:30:15",
                "2023-10-27 08:45:30",
                "2023-10-27 11:15:00",
                "2023-10-27 13:45:45",
                "2023-10-28 09:30:15",
                "2023-10-28 12:00:30",
                "2023-10-28 14:30:00",
                "2023-10-29 10:15:45",
                "2023-10-29 12:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频广告信息表.视频链接 <URLField>
    #

    if mcfieldnamezh == "视频链接":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表.缩略图链接 <URLField>
    #

    if mcfieldnamezh == "缩略图链接":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表.广告主ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "广告主ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表.广告分类ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "广告分类ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告信息表.广告状态 <CharField>
    #

    if mcfieldnamezh == "广告状态":

        # 载入配置成功
        # 给出一些视频广告信息表表中广告状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "待审核",
                "已审核",
                "已发布",
                "已下架",
                "已过期",
                "暂停中",
                "待支付",
                "支付成功",
                "支付失败",
                "审核失败",
                "审核中",
                "即将到期",
                "已拒绝",
                "重新审核",
                "已删除",
                "草稿中",
                "已锁定",
                "已恢复",
                "自定义状态1",
                "自定义状态2",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表

    # 视频广告播放记录表.视频广告ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频广告ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告播放记录表.播放时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "播放时间":

        # 载入配置成功
        # 给出一些视频广告播放记录表表中播放时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 10:00:00",
                "2023-10-23 12:30:15",
                "2023-10-23 15:45:30",
                "2023-10-23 18:15:45",
                "2023-10-24 09:30:00",
                "2023-10-24 11:45:15",
                "2023-10-24 14:00:30",
                "2023-10-24 16:30:45",
                "2023-10-25 10:15:00",
                "2023-10-25 12:45:15",
                "2023-10-25 15:15:30",
                "2023-10-25 17:45:45",
                "2023-10-26 09:45:00",
                "2023-10-26 12:15:15",
                "2023-10-26 14:45:30",
                "2023-10-26 17:15:45",
                "2023-10-27 10:30:00",
                "2023-10-27 13:00:15",
                "2023-10-27 15:30:30",
                "2023-10-27 18:00:45",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表.播放时长 <CharField>
    #

    if mcfieldnamezh == "播放时长":

        # 载入配置成功
        # 给出一些视频广告播放记录表表中播放时长的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "00:01:30",
                "00:02:15",
                "00:03:45",
                "00:05:00",
                "00:07:30",
                "00:10:00",
                "00:15:00",
                "00:20:00",
                "00:30:00",
                "00:45:00",
                "01:00:00",
                "01:15:00",
                "01:30:00",
                "01:45:00",
                "02:00:00",
                "02:30:00",
                "03:00:00",
                "03:45:00",
                "04:15:00",
                "04:45:00",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表.用户ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "用户ID关联用户":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频广告播放记录表.设备类型 <CharField>
    #

    if mcfieldnamezh == "设备类型":

        # 载入配置成功
        # 给出一些视频广告播放记录表表中设备类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "手机",
                "笔记本电脑",
                "平板电脑",
                "台式电脑",
                "打印机",
                "扫描仪",
                "路由器",
                "交换机",
                "投影仪",
                "显示器",
                "电视",
                "空调",
                "冰箱",
                "洗衣机",
                "微波炉",
                "烤箱",
                "空气净化器",
                "智能手表",
                "智能音箱",
                "无人机",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表.地址 <TextField>
    #

    if mcfieldnamezh == "地址":

        # 载入配置成功
        # 给出一些视频广告播放记录表表中地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "北京市朝阳区三里屯路1号",
                "上海市浦东新区世纪大道100号",
                "广州市天河区珠江新城华夏路8号",
                "深圳市福田区福华三路88号",
                "杭州市西湖区文三路478号",
                "成都市锦江区红星路二段99号",
                "重庆市渝中区解放碑步行街1号",
                "天津市和平区南京路123号",
                "北京市西城区金融大街1号",
                "上海市黄浦区南京东路200号",
                "广州市越秀区中山五路33号",
                "深圳市罗湖区深南东路5002号",
                "杭州市拱墅区莫干山路111号",
                "南京市秦淮区中山南路89号",
                "武汉市江汉区解放大道688号",
                "西安市碑林区南大街1号",
                "沈阳市和平区中山路123号",
                "长沙市天心区黄兴南路步行街88号",
                "青岛市市南区香港中路10号",
                "厦门市思明区中山路步行街1号",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表.地理位置 <CharField>
    #

    if mcfieldnamezh == "地理位置":

        # 载入配置成功
        # 给出一些视频广告播放记录表表中地理位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "北京",
                "上海",
                "广州",
                "深圳",
                "杭州",
                "成都",
                "重庆",
                "武汉",
                "西安",
                "南京",
                "天津",
                "苏州",
                "长沙",
                "郑州",
                "青岛",
                "济南",
                "沈阳",
                "大连",
                "厦门",
                "福州",
            )
        )

        val = loadvalue

        return val
    # 视频广告播放记录表.播放状态如成功、失败、中断等 <CharField>
    #

    if mcfieldnamezh == "播放状态如成功、失败、中断等":

        # 给出一些视频广告播放记录表表中播放状态如成功、失败、中断等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕表

    # 视频弹幕表.视频唯一标识符关联视频 <UUIDField>
    #

    if mcfieldnamezh == "视频唯一标识符关联视频":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频弹幕表.弹幕内容 <TextField>
    #

    if mcfieldnamezh == "弹幕内容":

        # 载入配置成功
        # 给出一些视频弹幕表表中弹幕内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "这是一条弹幕",
                "第二条弹幕内容",
                "第三条弹幕，测试",
                "哈哈，看这里",
                "喜欢这个视频",
                "求关注，谢谢",
                "弹幕666",
                "点赞点赞",
                "弹幕飘过",
                "好有趣啊",
                "大家晚上好",
                "弹幕互动",
                "弹幕测试",
                "弹幕内容示例",
                "第10条弹幕",
                "第11条弹幕内容",
                "第12条弹幕飘过",
                "第13条弹幕测试",
                "第14条弹幕内容",
                "第15条弹幕示例",
            )
        )

        val = loadvalue

        return val
    # 视频弹幕表.发送弹幕的用户唯一标识符关联用户 <UUIDField>
    #

    if mcfieldnamezh == "发送弹幕的用户唯一标识符关联用户":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频弹幕表.发送时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "发送时间":

        # 载入配置成功
        # 给出一些视频弹幕表表中发送时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 08:00:00",
                "2023-10-23 08:15:30",
                "2023-10-23 08:30:45",
                "2023-10-23 08:45:15",
                "2023-10-23 09:00:00",
                "2023-10-23 09:15:30",
                "2023-10-23 09:30:45",
                "2023-10-23 09:45:15",
                "2023-10-23 10:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 10:30:45",
                "2023-10-23 10:45:15",
                "2023-10-23 11:00:00",
                "2023-10-23 11:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 11:45:15",
                "2023-10-23 12:00:00",
                "2023-10-23 12:15:30",
                "2023-10-23 12:30:45",
                "2023-10-23 12:45:15",
            )
        )

        val = loadvalue

        return val
    # 视频弹幕表.弹幕颜色 <CharField>
    #

    if mcfieldnamezh == "弹幕颜色":

        # 给出一些视频弹幕表表中弹幕颜色的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕表.字体大小 <CharField>
    #

    if mcfieldnamezh == "字体大小":

        # 载入配置成功
        # 给出一些视频弹幕表表中字体大小的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "10px",
                "12px",
                "14px",
                "16px",
                "18px",
                "20px",
                "22px",
                "24px",
                "26px",
                "28px",
                "30px",
                "32px",
                "34px",
                "36px",
                "38px",
                "40px",
                "42px",
                "44px",
                "46px",
                "48px",
            )
        )

        val = loadvalue

        return val
    # 视频弹幕表.是否可见用于控制弹幕的显示与隐藏 <BooleanField>
    #

    if mcfieldnamezh == "是否可见用于控制弹幕的显示与隐藏":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频弹幕表.弹幕位置如顶部、底部、滚动等 <CharField>
    #

    if mcfieldnamezh == "弹幕位置如顶部、底部、滚动等":

        # 给出一些视频弹幕表表中弹幕位置如顶部、底部、滚动等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕表.弹幕显示时长秒 <CharField>
    #

    if mcfieldnamezh == "弹幕显示时长秒":

        # 给出一些视频弹幕表表中弹幕显示时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕屏蔽词表

    # 视频弹幕屏蔽词表.屏蔽词 <CharField>
    #

    if mcfieldnamezh == "屏蔽词":

        # 给出一些视频弹幕屏蔽词表表中屏蔽词的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕屏蔽词表.视频ID关联字段指向视频的ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联字段指向视频的ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频弹幕屏蔽词表.创建者ID关联字段指向用户的ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者ID关联字段指向用户的ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频弹幕屏蔽词表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频弹幕屏蔽词表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频弹幕屏蔽词表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频弹幕屏蔽词表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频弹幕屏蔽词表.是否激活用于控制屏蔽词是否生效 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于控制屏蔽词是否生效":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频弹幕屏蔽词表.屏蔽类型如关键词、正则达式等 <CharField>
    #

    if mcfieldnamezh == "屏蔽类型如关键词、正则达式等":

        # 给出一些视频弹幕屏蔽词表表中屏蔽类型如关键词、正则达式等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频弹幕屏蔽词表.描述对屏蔽词的额外说明或备注 <TextField>
    #

    if mcfieldnamezh == "描述对屏蔽词的额外说明或备注":

        # 给出一些视频弹幕屏蔽词表表中描述对屏蔽词的额外说明或备注的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频多语言字幕表

    # 视频多语言字幕表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频多语言字幕表.语言代码 <CharField>
    #

    if mcfieldnamezh == "语言代码":

        # 给出一些视频多语言字幕表表中语言代码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频多语言字幕表.字幕文本 <TextField>
    #

    if mcfieldnamezh == "字幕文本":

        # 给出一些视频多语言字幕表表中字幕文本的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频多语言字幕表.开始时间字幕出现时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "开始时间字幕出现时间":

        # 给出一些视频多语言字幕表表中开始时间字幕出现时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频多语言字幕表.结束时间字幕消失时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "结束时间字幕消失时间":

        # 给出一些视频多语言字幕表表中结束时间字幕消失时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频多语言字幕表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频多语言字幕表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频多语言字幕表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频多语言字幕表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频多语言字幕表.是否激活用于控制字幕是否显示在视频中 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于控制字幕是否显示在视频中":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频多语言字幕表.创建者用户ID关联到用户示谁添加了这条字幕 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建者用户ID关联到用户示谁添加了这条字幕":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频转码任务表

    # 视频转码任务表.任务ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "任务ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频转码任务表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频转码任务表.源视频路径 <FileField>
    #

    if mcfieldnamezh == "源视频路径":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频转码任务表.目标格式 <CharField>
    #

    if mcfieldnamezh == "目标格式":

        # 给出一些视频转码任务表表中目标格式的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频转码任务表.任务状态 <CharField>
    #

    if mcfieldnamezh == "任务状态":

        # 载入配置成功
        # 给出一些视频转码任务表表中任务状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "待分配",
                "已分配",
                "进行中",
                "待审核",
                "审核通过",
                "审核拒绝",
                "待修改",
                "已修改",
                "待确认",
                "已确认",
                "待执行",
                "执行中",
                "执行完成",
                "待关闭",
                "已关闭",
                "已取消",
                "暂停中",
                "已恢复",
                "延期中",
                "已完成",
            )
        )

        val = loadvalue

        return val
    # 视频转码任务表.任务进度 <CharField>
    #

    if mcfieldnamezh == "任务进度":

        # 给出一些视频转码任务表表中任务进度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频转码任务表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频转码任务表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频转码任务表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频转码任务表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频转码任务表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联用户ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频转码任务表.任务优先级 <CharField>
    #

    if mcfieldnamezh == "任务优先级":

        # 给出一些视频转码任务表表中任务优先级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频分析指标表

    # 视频分析指标表.视频ID关联视频 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联视频":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频分析指标表.分析时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "分析时间":

        # 载入配置成功
        # 给出一些视频分析指标表表中分析时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:30:15",
                "2023-03-15 12:15:45",
                "2023-03-15 13:45:30",
                "2023-03-16 08:45:00",
                "2023-03-16 11:15:20",
                "2023-03-16 14:30:00",
                "2023-03-16 16:00:10",
                "2023-03-17 09:30:30",
                "2023-03-17 12:00:45",
                "2023-03-17 14:45:15",
                "2023-03-17 17:15:00",
                "2023-03-18 10:15:30",
                "2023-03-18 13:00:00",
                "2023-03-18 15:30:15",
                "2023-03-18 18:00:45",
                "2023-03-19 09:45:00",
                "2023-03-19 12:30:10",
                "2023-03-19 15:15:30",
                "2023-03-19 17:45:00",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.观看次数 <CharField>
    #

    if mcfieldnamezh == "观看次数":

        # 载入配置成功
        # 给出一些视频分析指标表表中观看次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "1234",
                "567",
                "890",
                "123",
                "45",
                "67",
                "89",
                "10",
                "111",
                "222",
                "333",
                "444",
                "555",
                "666",
                "777",
                "888",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.点赞次数 <CharField>
    #

    if mcfieldnamezh == "点赞次数":

        # 载入配置成功
        # 给出一些视频分析指标表表中点赞次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "点赞次数",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "12",
                "34",
                "56",
                "78",
                "90",
                "11",
                "22",
                "33",
                "44",
                "55",
                "66",
                "77",
                "88",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.分享次数 <CharField>
    #

    if mcfieldnamezh == "分享次数":

        # 载入配置成功
        # 给出一些视频分析指标表表中分享次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "5",
                "12",
                "8",
                "3",
                "15",
                "9",
                "7",
                "11",
                "4",
                "6",
                "10",
                "1",
                "14",
                "2",
                "13",
                "16",
                "20",
                "18",
                "17",
                "19",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.评论次数 <TextField>
    #

    if mcfieldnamezh == "评论次数":

        # 载入配置成功
        # 给出一些视频分析指标表表中评论次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
                "890",
                "123",
                "456",
                "789",
                "101",
                "234",
                "567",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.跳出率 <CharField>
    #

    if mcfieldnamezh == "跳出率":

        # 载入配置成功
        # 给出一些视频分析指标表表中跳出率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "BounceRate1",
                "BounceRate2",
                "BounceRate3",
                "BounceRate4",
                "BounceRate5",
                "BounceRate6",
                "BounceRate7",
                "BounceRate8",
                "BounceRate9",
                "BounceRate10",
                "BounceRate11",
                "BounceRate12",
                "BounceRate13",
                "BounceRate14",
                "BounceRate15",
                "BounceRate16",
                "BounceRate17",
                "BounceRate18",
                "BounceRate19",
                "BounceRate20",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.平均观看时长 <CharField>
    #

    if mcfieldnamezh == "平均观看时长":

        # 载入配置成功
        # 给出一些视频分析指标表表中平均观看时长的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "120",
                "150",
                "85",
                "130",
                "90",
                "145",
                "110",
                "105",
                "160",
                "75",
                "135",
                "115",
                "95",
                "125",
                "100",
                "155",
                "80",
                "140",
                "170",
                "180",
            )
        )

        val = loadvalue

        return val
    # 视频分析指标表.互动率 <CharField>
    #

    if mcfieldnamezh == "互动率":

        # 给出一些视频分析指标表表中互动率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频质量评估表

    # 视频质量评估表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频质量评估表.质量评分 <IntegerField>
    #

    if mcfieldnamezh == "质量评分":

        val = faker.random.randint(1, 100)

        return val
    # 视频质量评估表.评估时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "评估时间":

        # 载入配置成功
        # 给出一些视频质量评估表表中评估时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-03-15 09:00:00",
                "2023-03-15 10:30:00",
                "2023-03-15 12:15:00",
                "2023-03-15 14:00:00",
                "2023-03-15 15:45:00",
                "2023-03-16 08:30:00",
                "2023-03-16 10:15:00",
                "2023-03-16 12:00:00",
                "2023-03-16 13:45:00",
                "2023-03-16 15:30:00",
                "2023-03-17 09:15:00",
                "2023-03-17 11:00:00",
                "2023-03-17 12:45:00",
                "2023-03-17 14:30:00",
                "2023-03-17 16:15:00",
                "2023-03-18 08:45:00",
                "2023-03-18 10:30:00",
                "2023-03-18 12:15:00",
                "2023-03-18 14:00:00",
                "2023-03-18 15:45:00",
            )
        )

        val = loadvalue

        return val
    # 视频质量评估表.关联评审员ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联评审员ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频质量评估表.帧率 <CharField>
    #

    if mcfieldnamezh == "帧率":

        # 载入配置成功
        # 给出一些视频质量评估表表中帧率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "24",
                "30",
                "60",
                "120",
                "240",
                "48",
                "50",
                "90",
                "144",
                "200",
                "25",
                "30.0",
                "60.0",
                "100",
                "150",
                "180",
                "210",
                "220",
                "230",
                "239.76  -- 注意最后一个值后面没有逗号",
            )
        )

        val = loadvalue

        return val
    # 视频质量评估表.分辨率 <CharField>
    #

    if mcfieldnamezh == "分辨率":

        # 载入配置成功
        # 给出一些视频质量评估表表中分辨率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "1920x1080",
                "1366x768",
                "1280x800",
                "1600x900",
                "1440x900",
                "1024x768",
                "800x600",
                "3840x2160",
                "2560x1440",
                "2048x1152",
                "1680x1050",
                "1280x720",
                "768x1366",
                "576x1024",
                "480x800",
                "320x240",
                "1080x1920",
                "900x1600",
                "720x1280",
                "640x480",
            )
        )

        val = loadvalue

        return val
    # 视频质量评估表.比特率 <CharField>
    #

    if mcfieldnamezh == "比特率":

        # 载入配置成功
        # 给出一些视频质量评估表表中比特率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "128kbps",
                "256kbps",
                "512kbps",
                "1Mbps",
                "2Mbps",
                "3Mbps",
                "4Mbps",
                "5Mbps",
                "6Mbps",
                "8Mbps",
                "10Mbps",
                "15Mbps",
                "20Mbps",
                "25Mbps",
                "30Mbps",
                "40Mbps",
                "50Mbps",
                "75Mbps",
                "100Mbps",
                "200Mbps",
            )
        )

        val = loadvalue

        return val
    # 视频质量评估表.编码格式 <CharField>
    #

    if mcfieldnamezh == "编码格式":

        # 载入配置成功
        # 给出一些视频质量评估表表中编码格式的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "UTF-8",
                "ISO-8859-1",
                "Windows-1252",
                "GB2312",
                "GBK",
                "GB18030",
                "Big5",
                "EUC-JP",
                "Shift_JIS",
                "KOI8-R",
                "KOI8-U",
                "EUC-KR",
                "ISO-2022-JP",
                "ISO-2022-KR",
                "ISO-IR-166",
                "ISO-IR-111",
                "ISO-8859-2",
                "ISO-8859-3",
                "ISO-8859-4",
                "ISO-8859-5",
            )
        )

        val = loadvalue

        return val
    # 视频质量评估表.是否检测到损坏 <BooleanField>
    #

    if mcfieldnamezh == "是否检测到损坏":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频质量评估表.相关问题ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "相关问题ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频水印信息表

    # 视频水印信息表.视频ID关联视频 <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "视频ID关联视频":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频水印信息表.水印文本 <TextField>
    #

    if mcfieldnamezh == "水印文本":

        # 给出一些视频水印信息表表中水印文本的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频水印信息表.水印位置如左上角、右下角等 <CharField>
    #

    if mcfieldnamezh == "水印位置如左上角、右下角等":

        # 给出一些视频水印信息表表中水印位置如左上角、右下角等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频水印信息表.水印大小如百分比或像素值 <CharField>
    #

    if mcfieldnamezh == "水印大小如百分比或像素值":

        # 给出一些视频水印信息表表中水印大小如百分比或像素值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频水印信息表.水印透明度0100% <CharField>
    #

    if mcfieldnamezh == "水印透明度0100%":

        # 给出一些视频水印信息表表中水印透明度0100%的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频水印信息表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建时间":

        # 载入配置成功
        # 给出一些视频水印信息表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23T09:15:30Z",
                "2023-10-22T14:45:12Z",
                "2023-10-21T21:30:00Z",
                "2023-10-20T12:15:45Z",
                "2023-10-19T08:30:15Z",
                "2023-10-18T17:00:00Z",
                "2023-10-17T10:45:30Z",
                "2023-10-16T15:15:15Z",
                "2023-10-15T22:00:00Z",
                "2023-10-14T11:30:45Z",
                "2023-10-13T06:45:15Z",
                "2023-10-12T19:00:00Z",
                "2023-10-11T13:15:30Z",
                "2023-10-10T07:45:12Z",
                "2023-10-09T20:30:00Z",
                "2023-10-08T11:15:45Z",
                "2023-10-07T05:00:15Z",
                "2023-10-06T18:30:00Z",
                "2023-10-05T12:45:30Z",
                "2023-10-04T09:15:15Z",
            )
        )

        val = loadvalue

        return val
    # 视频水印信息表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "更新时间":

        # 载入配置成功
        # 给出一些视频水印信息表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23 09:00:00",
                "2023-10-23 10:15:30",
                "2023-10-23 11:30:45",
                "2023-10-23 12:45:15",
                "2023-10-23 14:00:00",
                "2023-10-23 15:15:30",
                "2023-10-23 16:30:45",
                "2023-10-23 17:45:15",
                "2023-10-24 08:00:00",
                "2023-10-24 09:15:30",
                "2023-10-24 10:30:45",
                "2023-10-24 11:45:15",
                "2023-10-24 13:00:00",
                "2023-10-24 14:15:30",
                "2023-10-24 15:30:45",
                "2023-10-24 16:45:15",
                "2023-10-25 07:00:00",
                "2023-10-25 08:15:30",
                "2023-10-25 09:30:45",
            )
        )

        val = loadvalue

        return val
    # 视频水印信息表.是否激活用于控制水印是否生效如0为未激活1为激活 <BooleanField>
    #

    if mcfieldnamezh == "是否激活用于控制水印是否生效如0为未激活1为激活":

        val = faker.random.choice(("1", "0"))

        return val
    # 视频版权信息表

    # 视频版权信息表.关联视频ID <SelectField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "关联视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 视频版权信息表.版权持有人 <CharField>
    #

    if mcfieldnamezh == "版权持有人":

        # 给出一些视频版权信息表表中版权持有人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频版权信息表.版权年份 <CharField>
    #

    if mcfieldnamezh == "版权年份":

        # 给出一些视频版权信息表表中版权年份的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频版权信息表.许可类型 <CharField>
    #

    if mcfieldnamezh == "许可类型":

        # 给出一些视频版权信息表表中许可类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频版权信息表.许可状态 <CharField>
    #

    if mcfieldnamezh == "许可状态":

        # 给出一些视频版权信息表表中许可状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频版权信息表.版权描述 <TextField>
    #

    if mcfieldnamezh == "版权描述":

        # 给出一些视频版权信息表表中版权描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = ""
        val = loadvalue

        return val
    # 视频版权信息表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "创建日期":

        # 载入配置成功
        # 给出一些视频版权信息表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-01-01",
                "2023-01-02",
                "2023-01-03",
                "2023-01-04",
                "2023-01-05",
                "2023-01-06",
                "2023-01-07",
                "2023-01-08",
                "2023-01-09",
                "2023-01-10",
                "2023-01-11",
                "2023-01-12",
                "2023-01-13",
                "2023-01-14",
                "2023-01-15",
                "2023-01-16",
                "2023-01-17",
                "2023-01-18",
                "2023-01-19",
                "2023-01-20",
            )
        )

        val = loadvalue

        return val
    # 视频版权信息表.修改日期 <DateField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "修改日期":

        # 载入配置成功
        # 给出一些视频版权信息表表中修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "2023-10-23",
                "2023-10-22",
                "2023-10-21",
                "2023-10-20",
                "2023-10-19",
                "2023-10-18",
                "2023-10-17",
                "2023-10-16",
                "2023-10-15",
                "2023-10-14",
                "2023-10-13",
                "2023-10-12",
                "2023-10-11",
                "2023-10-10",
                "2023-10-09",
                "2023-10-08",
                "2023-10-07",
                "2023-10-06",
                "2023-10-05",
                "2023-10-04",
                "2023-10-23",
                "2023-10-22",
                "2023-10-21",
                "2023-10-20",
                "2023-10-19",
                "2023-10-18",
                "2023-10-17",
                "2023-10-16",
                "2023-10-15",
                "2023-10-14",
                "2023-10-13",
                "2023-10-12",
                "2023-10-11",
                "2023-10-10",
                "2023-10-09",
                "2023-10-08",
                "2023-10-07",
                "2023-10-06",
                "2023-10-05",
                "2023-10-04",
            )
        )

        val = loadvalue

        return val
    # 视频版权信息表.相关视频ID <UUIDField>
    # -----------------------------SKIP---------------------------

    if mcfieldnamezh == "相关视频ID":

        # 如果是图片，文件，UUID，URL，不需要生成

        val = faker.url()

        return val
    # 系统管理员

    # 系统管理员.管理员姓名 <CharField>
    #

    if mcfieldnamezh == "管理员姓名":

        # 载入配置成功
        # 给出一些系统管理员表中管理员姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个

        loadvalue = faker.random.choice(
            (
                "管理员姓名1",
                "管理员姓名2",
                "管理员姓名示例1",
                "管理员姓名2",
            )
        )

        val = loadvalue

        return val
    return val


# 视频信息表


def generate_videoinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoinfo"
    fields_en = [
        "`videoid`",
        "`videotitle`",
        "`videodescription`",
        "`uploadtime`",
        "`duration`",
        "`resolution`",
        "`filetype`",
        "`filesize`",
        "`creatkwkworid`",
        "`categkwkworyid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频ID 根据名称选择合适的函数来生成数据

        videoid = get(faker, "视频ID")
        values.append("'" + str(videoid) + "'")

        # 视频标题 根据名称选择合适的函数来生成数据

        videotitle = get(faker, "视频标题")
        values.append("'" + str(videotitle) + "'")

        # 视频描述 根据名称选择合适的函数来生成数据

        videodescription = get(faker, "视频描述")
        values.append("'" + str(videodescription) + "'")

        # 上传时间 根据名称选择合适的函数来生成数据

        uploadtime = get(faker, "上传时间")
        values.append("'" + str(uploadtime) + "'")

        # 视频时长秒 根据名称选择合适的函数来生成数据

        duration = get(faker, "视频时长秒")
        values.append("'" + str(duration) + "'")

        # 视频分辨率 根据名称选择合适的函数来生成数据

        resolution = get(faker, "视频分辨率")
        values.append("'" + str(resolution) + "'")

        # 文件类型 根据名称选择合适的函数来生成数据

        filetype = get(faker, "文件类型")
        values.append("'" + str(filetype) + "'")

        # 文件大小KBMBGB 根据名称选择合适的函数来生成数据

        filesize = get(faker, "文件大小KBMBGB")
        values.append("'" + str(filesize) + "'")

        # 本表字段：创建者ID关联用户--》关联表：57990--》字段：用户名

        if len(cache.get("创建者ID关联用户", [])) < 10:
            creatkwkworid = str(len(cache.get("创建者ID关联用户", [])))
            # creatkwkworid = get(faker,'创建者ID关联用户')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "创建者ID关联用户",
                    )
                )
            )
        # 用于外键补充 原字段：创建者ID关联用户【 57990 用户名 】

        if "创建者ID关联用户" not in cache:
            cache["创建者ID关联用户"] = set()
        cache["创建者ID关联用户"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        # 本表字段：类别ID关联视频类别--》关联表：57909--》字段：分类名称

        if len(cache.get("类别ID关联视频类别", [])) < 10:
            categkwkworyid = str(len(cache.get("类别ID关联视频类别", [])))
            # categkwkworyid = get(faker,'类别ID关联视频类别')
        else:
            categkwkworyid = faker.random.choice(
                list(
                    cache.get(
                        "类别ID关联视频类别",
                    )
                )
            )
        # 用于外键补充 原字段：类别ID关联视频类别【 57909 分类名称 】

        if "类别ID关联视频类别" not in cache:
            cache["类别ID关联视频类别"] = set()
        cache["类别ID关联视频类别"].add(categkwkworyid)
        values.append("'" + str(categkwkworyid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频分类表


def generate_videocategkwkwory(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videocategkwkwory"
    fields_en = [
        "`name`",
        "`description`",
        "`parentid`",
        "`createtime`",
        "`updatetime`",
        "`kwkwisactive`",
        "`skwkwortorder`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 分类名称 根据名称选择合适的函数来生成数据

        name = get(faker, "分类名称")
        values.append("'" + str(name) + "'")

        # 分类描述 根据名称选择合适的函数来生成数据

        description = get(faker, "分类描述")
        values.append("'" + str(description) + "'")

        # 父分类ID用于构建分类层级如果为顶级分类则为NULL 根据名称选择合适的函数来生成数据

        parentid = get(faker, "父分类ID用于构建分类层级如果为顶级分类则为NULL")
        values.append("'" + str(parentid) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 是否激活用于控制分类是否显示在前端 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于控制分类是否显示在前端")
        values.append("'" + str(kwkwisactive) + "'")

        # 排序顺序 根据名称选择合适的函数来生成数据

        skwkwortorder = get(faker, "排序顺序")
        values.append("'" + str(skwkwortorder) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频标签表


def generate_videotag(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videotag"
    fields_en = [
        "`tagid`",
        "`tagname`",
        "`videoid`",
        "`createtime`",
        "`updatetime`",
        "`kwkwisactive`",
        "`description`",
        "`creatkwkworid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 标签ID 根据名称选择合适的函数来生成数据

        tagid = get(faker, "标签ID")
        values.append("'" + str(tagid) + "'")

        # 标签名称 根据名称选择合适的函数来生成数据

        tagname = get(faker, "标签名称")
        values.append("'" + str(tagname) + "'")

        # 本表字段：视频ID关联字段指向视频中的视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联字段指向视频中的视频ID", [])) < 10:
            videoid = str(len(cache.get("视频ID关联字段指向视频中的视频ID", [])))
            # videoid = get(faker,'视频ID关联字段指向视频中的视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联字段指向视频中的视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联字段指向视频中的视频ID【 57900 视频标题 】

        if "视频ID关联字段指向视频中的视频ID" not in cache:
            cache["视频ID关联字段指向视频中的视频ID"] = set()
        cache["视频ID关联字段指向视频中的视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 是否激活用于标记标签是否可用 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于标记标签是否可用")
        values.append("'" + str(kwkwisactive) + "'")

        # 标签描述 根据名称选择合适的函数来生成数据

        description = get(faker, "标签描述")
        values.append("'" + str(description) + "'")

        # 本表字段：创建者ID关联字段指向用户中的用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("创建者ID关联字段指向用户中的用户ID", [])) < 10:
            creatkwkworid = str(
                len(cache.get("创建者ID关联字段指向用户中的用户ID", []))
            )
            # creatkwkworid = get(faker,'创建者ID关联字段指向用户中的用户ID')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "创建者ID关联字段指向用户中的用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：创建者ID关联字段指向用户中的用户ID【 57990 用户名 】

        if "创建者ID关联字段指向用户中的用户ID" not in cache:
            cache["创建者ID关联字段指向用户中的用户ID"] = set()
        cache["创建者ID关联字段指向用户中的用户ID"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频文件存储表


def generate_videofilestkwkworage(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videofilestkwkworage"
    fields_en = [
        "`videoid`",
        "`filename`",
        "`filepath`",
        "`filesize`",
        "`uploadtime`",
        "`duration`",
        "`resolution`",
        "`kwkwfkwkwormat`",
        "`creatkwkworid`",
        "`categkwkworyid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频ID 根据名称选择合适的函数来生成数据

        videoid = get(faker, "视频ID")
        values.append("'" + str(videoid) + "'")

        # 文件名 根据名称选择合适的函数来生成数据

        filename = get(faker, "文件名")
        values.append("'" + str(filename) + "'")

        # 文件存储路径 根据名称选择合适的函数来生成数据

        filepath = get(faker, "文件存储路径")
        values.append("'" + str(filepath) + "'")

        # 文件大小单位MB 根据名称选择合适的函数来生成数据

        filesize = get(faker, "文件大小单位MB")
        values.append("'" + str(filesize) + "'")

        # 上传时间 根据名称选择合适的函数来生成数据

        uploadtime = get(faker, "上传时间")
        values.append("'" + str(uploadtime) + "'")

        # 视频时长单位秒 根据名称选择合适的函数来生成数据

        duration = get(faker, "视频时长单位秒")
        values.append("'" + str(duration) + "'")

        # 分辨率例如1920x1080 根据名称选择合适的函数来生成数据

        resolution = get(faker, "分辨率例如1920x1080")
        values.append("'" + str(resolution) + "'")

        # 视频格式例如mp4 根据名称选择合适的函数来生成数据

        kwkwfkwkwormat = get(faker, "视频格式例如mp4")
        values.append("'" + str(kwkwfkwkwormat) + "'")

        # 本表字段：创建者ID关联用户--》关联表：57990--》字段：用户名

        if len(cache.get("创建者ID关联用户", [])) < 10:
            creatkwkworid = str(len(cache.get("创建者ID关联用户", [])))
            # creatkwkworid = get(faker,'创建者ID关联用户')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "创建者ID关联用户",
                    )
                )
            )
        # 用于外键补充 原字段：创建者ID关联用户【 57990 用户名 】

        if "创建者ID关联用户" not in cache:
            cache["创建者ID关联用户"] = set()
        cache["创建者ID关联用户"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        # 本表字段：分类ID关联视频分类--》关联表：57909--》字段：分类名称

        if len(cache.get("分类ID关联视频分类", [])) < 10:
            categkwkworyid = str(len(cache.get("分类ID关联视频分类", [])))
            # categkwkworyid = get(faker,'分类ID关联视频分类')
        else:
            categkwkworyid = faker.random.choice(
                list(
                    cache.get(
                        "分类ID关联视频分类",
                    )
                )
            )
        # 用于外键补充 原字段：分类ID关联视频分类【 57909 分类名称 】

        if "分类ID关联视频分类" not in cache:
            cache["分类ID关联视频分类"] = set()
        cache["分类ID关联视频分类"].add(categkwkworyid)
        values.append("'" + str(categkwkworyid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频播放记录表


def generate_videoplayreckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoplayreckwkword"
    fields_en = [
        "`videoid`",
        "`userid`",
        "`playstarttime`",
        "`playendtime`",
        "`playduration`",
        "`playstatus`",
        "`devicetype`",
        "`ipaddress`",
        "`location`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联视频信息--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联视频信息", [])) < 10:
            videoid = str(len(cache.get("视频ID关联视频信息", [])))
            # videoid = get(faker,'视频ID关联视频信息')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联视频信息",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联视频信息【 57900 视频标题 】

        if "视频ID关联视频信息" not in cache:
            cache["视频ID关联视频信息"] = set()
        cache["视频ID关联视频信息"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：用户ID关联用户信息--》关联表：57990--》字段：用户名

        if len(cache.get("用户ID关联用户信息", [])) < 10:
            userid = str(len(cache.get("用户ID关联用户信息", [])))
            # userid = get(faker,'用户ID关联用户信息')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "用户ID关联用户信息",
                    )
                )
            )
        # 用于外键补充 原字段：用户ID关联用户信息【 57990 用户名 】

        if "用户ID关联用户信息" not in cache:
            cache["用户ID关联用户信息"] = set()
        cache["用户ID关联用户信息"].add(userid)
        values.append("'" + str(userid) + "'")

        # 播放开始时间 根据名称选择合适的函数来生成数据

        playstarttime = get(faker, "播放开始时间")
        values.append("'" + str(playstarttime) + "'")

        # 播放结束时间 根据名称选择合适的函数来生成数据

        playendtime = get(faker, "播放结束时间")
        values.append("'" + str(playendtime) + "'")

        # 播放时长秒 根据名称选择合适的函数来生成数据

        playduration = get(faker, "播放时长秒")
        values.append("'" + str(playduration) + "'")

        # 播放状态如已完成、暂停、中断 根据名称选择合适的函数来生成数据

        playstatus = get(faker, "播放状态如已完成、暂停、中断")
        values.append("'" + str(playstatus) + "'")

        # 设备类型如手机、平板、电脑 根据名称选择合适的函数来生成数据

        devicetype = get(faker, "设备类型如手机、平板、电脑")
        values.append("'" + str(devicetype) + "'")

        # IP地址 根据名称选择合适的函数来生成数据

        ipaddress = get(faker, "IP地址")
        values.append("'" + str(ipaddress) + "'")

        # 播放位置可选根据IP解析的地理位置 根据名称选择合适的函数来生成数据

        location = get(faker, "播放位置可选根据IP解析的地理位置")
        values.append("'" + str(location) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频评论表


def generate_videocomment(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videocomment"
    fields_en = [
        "`videoid`",
        "`userid`",
        "`content`",
        "`createtime`",
        "`likecount`",
        "`replycount`",
        "`kwkwiskwkwdeleted`",
        "`parentid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 评论内容 根据名称选择合适的函数来生成数据

        content = get(faker, "评论内容")
        values.append("'" + str(content) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 点赞数 根据名称选择合适的函数来生成数据

        likecount = get(faker, "点赞数")
        values.append("'" + str(likecount) + "'")

        # 回复数 根据名称选择合适的函数来生成数据

        replycount = get(faker, "回复数")
        values.append("'" + str(replycount) + "'")

        # 是否已删除 根据名称选择合适的函数来生成数据

        kwkwiskwkwdeleted = get(faker, "是否已删除")
        values.append("'" + str(kwkwiskwkwdeleted) + "'")

        # 本表字段：关联父评论ID--》关联表：57945--》字段：评论内容

        if len(cache.get("关联父评论ID", [])) < 10:
            parentid = str(len(cache.get("关联父评论ID", [])))
            # parentid = get(faker,'关联父评论ID')
        else:
            parentid = faker.random.choice(
                list(
                    cache.get(
                        "关联父评论ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联父评论ID【 57945 评论内容 】

        if "关联父评论ID" not in cache:
            cache["关联父评论ID"] = set()
        cache["关联父评论ID"].add(parentid)
        values.append("'" + str(parentid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频点赞表


def generate_videolike(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videolike"
    fields_en = [
        "`videoid`",
        "`userid`",
        "`liketime`",
        "`kwkwisliked`",
        "`ipaddress`",
        "`liketype`",
        "`platkwkwfkwkworm`",
        "`deviceid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 点赞时间 根据名称选择合适的函数来生成数据

        liketime = get(faker, "点赞时间")
        values.append("'" + str(liketime) + "'")

        # 是否点赞1为已点赞0为未点赞用于取消点赞功能 根据名称选择合适的函数来生成数据

        kwkwisliked = get(faker, "是否点赞1为已点赞0为未点赞用于取消点赞功能")
        values.append("'" + str(kwkwisliked) + "'")

        # 点赞时的IP地址 根据名称选择合适的函数来生成数据

        ipaddress = get(faker, "点赞时的IP地址")
        values.append("'" + str(ipaddress) + "'")

        # 点赞类型如普通点赞、特殊点赞等可用枚举或示 根据名称选择合适的函数来生成数据

        liketype = get(faker, "点赞类型如普通点赞、特殊点赞等可用枚举或示")
        values.append("'" + str(liketype) + "'")

        # 点赞平台如Web、iOS、Android等 根据名称选择合适的函数来生成数据

        platkwkwfkwkworm = get(faker, "点赞平台如Web、iOS、Android等")
        values.append("'" + str(platkwkwfkwkworm) + "'")

        # 设备ID可选用于追踪用户设备 根据名称选择合适的函数来生成数据

        deviceid = get(faker, "设备ID可选用于追踪用户设备")
        values.append("'" + str(deviceid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频分享表


def generate_videoshare(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoshare"
    fields_en = [
        "`id`",
        "`videoid`",
        "`userid`",
        "`sharetime`",
        "`title`",
        "`description`",
        "`thumbnailurl`",
        "`viewcount`",
        "`likecount`",
        "`commentcount`",
        "`sharestatus`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 分享时间 根据名称选择合适的函数来生成数据

        sharetime = get(faker, "分享时间")
        values.append("'" + str(sharetime) + "'")

        # 视频标题 根据名称选择合适的函数来生成数据

        title = get(faker, "视频标题")
        values.append("'" + str(title) + "'")

        # 视频描述 根据名称选择合适的函数来生成数据

        description = get(faker, "视频描述")
        values.append("'" + str(description) + "'")

        # 缩略图URL 根据名称选择合适的函数来生成数据

        thumbnailurl = get(faker, "缩略图URL")
        values.append("'" + str(thumbnailurl) + "'")

        # 观看次数 根据名称选择合适的函数来生成数据

        viewcount = get(faker, "观看次数")
        values.append("'" + str(viewcount) + "'")

        # 点赞次数 根据名称选择合适的函数来生成数据

        likecount = get(faker, "点赞次数")
        values.append("'" + str(likecount) + "'")

        # 评论次数 根据名称选择合适的函数来生成数据

        commentcount = get(faker, "评论次数")
        values.append("'" + str(commentcount) + "'")

        # 分享状态例如已分享、已删除 根据名称选择合适的函数来生成数据

        sharestatus = get(faker, "分享状态例如已分享、已删除")
        values.append("'" + str(sharestatus) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频观看时长统计表


def generate_videoviewduration(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoviewduration"
    fields_en = [
        "`videoid`",
        "`userid`",
        "`viewstarttime`",
        "`viewendtime`",
        "`duration`",
        "`devicetype`",
        "`viewlocation`",
        "`netwkwkworktype`",
        "`kwkwiscompleted`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 观看开始时间 根据名称选择合适的函数来生成数据

        viewstarttime = get(faker, "观看开始时间")
        values.append("'" + str(viewstarttime) + "'")

        # 观看结束时间 根据名称选择合适的函数来生成数据

        viewendtime = get(faker, "观看结束时间")
        values.append("'" + str(viewendtime) + "'")

        # 观看时长秒 根据名称选择合适的函数来生成数据

        duration = get(faker, "观看时长秒")
        values.append("'" + str(duration) + "'")

        # 设备类型 根据名称选择合适的函数来生成数据

        devicetype = get(faker, "设备类型")
        values.append("'" + str(devicetype) + "'")

        # 观看地点 根据名称选择合适的函数来生成数据

        viewlocation = get(faker, "观看地点")
        values.append("'" + str(viewlocation) + "'")

        # 网络类型 根据名称选择合适的函数来生成数据

        netwkwkworktype = get(faker, "网络类型")
        values.append("'" + str(netwkwkworktype) + "'")

        # 是否观看完成0未完成1已完成 根据名称选择合适的函数来生成数据

        kwkwiscompleted = get(faker, "是否观看完成0未完成1已完成")
        values.append("'" + str(kwkwiscompleted) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频上传用户表


def generate_videouploader(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videouploader"
    fields_en = [
        "`userid`",
        "`username`",
        "`email`",
        "`phonenumber`",
        "`uploadtime`",
        "`videoid`",
        "`videotitle`",
        "`videodescription`",
        "`videocategkwkworyid`",
        "`videostatus`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 用户名 根据名称选择合适的函数来生成数据

        username = get(faker, "用户名")
        values.append("'" + str(username) + "'")

        # 电子邮件 根据名称选择合适的函数来生成数据

        email = get(faker, "电子邮件")
        values.append("'" + str(email) + "'")

        # 电话号码 根据名称选择合适的函数来生成数据

        phonenumber = get(faker, "电话号码")
        values.append("'" + str(phonenumber) + "'")

        # 上传时间 根据名称选择合适的函数来生成数据

        uploadtime = get(faker, "上传时间")
        values.append("'" + str(uploadtime) + "'")

        # 视频ID 根据名称选择合适的函数来生成数据

        videoid = get(faker, "视频ID")
        values.append("'" + str(videoid) + "'")

        # 视频标题 根据名称选择合适的函数来生成数据

        videotitle = get(faker, "视频标题")
        values.append("'" + str(videotitle) + "'")

        # 视频描述 根据名称选择合适的函数来生成数据

        videodescription = get(faker, "视频描述")
        values.append("'" + str(videodescription) + "'")

        # 视频分类ID 根据名称选择合适的函数来生成数据

        videocategkwkworyid = get(faker, "视频分类ID")
        values.append("'" + str(videocategkwkworyid) + "'")

        # 视频状态如审核中、已发布、已删除 根据名称选择合适的函数来生成数据

        videostatus = get(faker, "视频状态如审核中、已发布、已删除")
        values.append("'" + str(videostatus) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 用户信息表


def generate_userinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "userinfo"
    fields_en = [
        "`userid`",
        "`username`",
        "`useremail`",
        "`userpkwkwasswkwkword`",
        "`phonenumber`",
        "`gender`",
        "`birthdate`",
        "`regkwkwisterdate`",
        "`userrole`",
        "`lkwkwastlogkwkwintime`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 用户ID 根据名称选择合适的函数来生成数据

        userid = get(faker, "用户ID")
        values.append("'" + str(userid) + "'")

        # 用户名 根据名称选择合适的函数来生成数据

        username = get(faker, "用户名")
        values.append("'" + str(username) + "'")

        # 用户邮箱 根据名称选择合适的函数来生成数据

        useremail = get(faker, "用户邮箱")
        values.append("'" + str(useremail) + "'")

        # 用户密码 根据名称选择合适的函数来生成数据

        userpkwkwasswkwkword = get(faker, "用户密码")
        values.append("'" + str(userpkwkwasswkwkword) + "'")

        # 电话号码 根据名称选择合适的函数来生成数据

        phonenumber = get(faker, "电话号码")
        values.append("'" + str(phonenumber) + "'")

        # 性别 根据名称选择合适的函数来生成数据

        gender = get(faker, "性别")
        values.append("'" + str(gender) + "'")

        # 出生日期 根据名称选择合适的函数来生成数据

        birthdate = get(faker, "出生日期")
        values.append("'" + str(birthdate) + "'")

        # 注册日期 根据名称选择合适的函数来生成数据

        regkwkwisterdate = get(faker, "注册日期")
        values.append("'" + str(regkwkwisterdate) + "'")

        # 用户角色 根据名称选择合适的函数来生成数据

        userrole = get(faker, "用户角色")
        values.append("'" + str(userrole) + "'")

        # 最后登录时间 根据名称选择合适的函数来生成数据

        lkwkwastlogkwkwintime = get(faker, "最后登录时间")
        values.append("'" + str(lkwkwastlogkwkwintime) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 用户权限表


def generate_userpermkwkwission(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "userpermkwkwission"
    fields_en = [
        "`userid`",
        "`permkwkwissionid`",
        "`rolename`",
        "`permkwkwissionname`",
        "`createtime`",
        "`updatetime`",
        "`isactive`",
        "`description`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 本表字段：关联权限ID--》关联表：58000--》字段：关联权限ID

        if len(cache.get("关联权限ID", [])) < 10:
            permkwkwissionid = str(len(cache.get("关联权限ID", [])))
            # permkwkwissionid = get(faker,'关联权限ID')
        else:
            permkwkwissionid = faker.random.choice(
                list(
                    cache.get(
                        "关联权限ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联权限ID【 58000 关联权限ID 】

        if "关联权限ID" not in cache:
            cache["关联权限ID"] = set()
        cache["关联权限ID"].add(permkwkwissionid)
        values.append("'" + str(permkwkwissionid) + "'")

        # 角色名称 根据名称选择合适的函数来生成数据

        rolename = get(faker, "角色名称")
        values.append("'" + str(rolename) + "'")

        # 权限名称 根据名称选择合适的函数来生成数据

        permkwkwissionname = get(faker, "权限名称")
        values.append("'" + str(permkwkwissionname) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 是否激活 根据名称选择合适的函数来生成数据

        isactive = get(faker, "是否激活")
        values.append("'" + str(isactive) + "'")

        # 描述 根据名称选择合适的函数来生成数据

        description = get(faker, "描述")
        values.append("'" + str(description) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 用户观看历史表


def generate_userwatchhkwkwistkwkwory(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "userwatchhkwkwistkwkwory"
    fields_en = [
        "`userid`",
        "`videoid`",
        "`watchtime`",
        "`watchduration`",
        "`watchstatus`",
        "`ratkwkwing`",
        "`comment`",
        "`likestatus`",
        "`sharestatus`",
        "`favkwkworitestatus`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 观看时间 根据名称选择合适的函数来生成数据

        watchtime = get(faker, "观看时间")
        values.append("'" + str(watchtime) + "'")

        # 观看时长 根据名称选择合适的函数来生成数据

        watchduration = get(faker, "观看时长")
        values.append("'" + str(watchduration) + "'")

        # 观看状态如已观看、观看中、暂停、已放弃 根据名称选择合适的函数来生成数据

        watchstatus = get(faker, "观看状态如已观看、观看中、暂停、已放弃")
        values.append("'" + str(watchstatus) + "'")

        # 评分可选用户对该视频的评分 根据名称选择合适的函数来生成数据

        ratkwkwing = get(faker, "评分可选用户对该视频的评分")
        values.append("'" + str(ratkwkwing) + "'")

        # 评论可选用户对该视频的评论 根据名称选择合适的函数来生成数据

        comment = get(faker, "评论可选用户对该视频的评论")
        values.append("'" + str(comment) + "'")

        # 点赞状态如已点赞、未点赞 根据名称选择合适的函数来生成数据

        likestatus = get(faker, "点赞状态如已点赞、未点赞")
        values.append("'" + str(likestatus) + "'")

        # 分享状态如已分享、未分享 根据名称选择合适的函数来生成数据

        sharestatus = get(faker, "分享状态如已分享、未分享")
        values.append("'" + str(sharestatus) + "'")

        # 收藏状态如已收藏、未收藏 根据名称选择合适的函数来生成数据

        favkwkworitestatus = get(faker, "收藏状态如已收藏、未收藏")
        values.append("'" + str(favkwkworitestatus) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频审核状态表


def generate_videoauditstatus(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoauditstatus"
    fields_en = [
        "`videoid`",
        "`status`",
        "`reviewerid`",
        "`reviewtime`",
        "`rejectrekwkwason`",
        "`comment`",
        "`kwkwisfkwkwinal`",
        "`createdat`",
        "`updatedat`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联字段指向视频的ID--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联字段指向视频的ID", [])) < 10:
            videoid = str(len(cache.get("视频ID关联字段指向视频的ID", [])))
            # videoid = get(faker,'视频ID关联字段指向视频的ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联字段指向视频的ID",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联字段指向视频的ID【 57900 视频标题 】

        if "视频ID关联字段指向视频的ID" not in cache:
            cache["视频ID关联字段指向视频的ID"] = set()
        cache["视频ID关联字段指向视频的ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 审核状态如待审核、审核通过、审核拒绝 根据名称选择合适的函数来生成数据

        status = get(faker, "审核状态如待审核、审核通过、审核拒绝")
        values.append("'" + str(status) + "'")

        # 本表字段：审核员ID关联字段指向审核员的ID--》关联表：58187--》字段：管理员姓名

        if len(cache.get("审核员ID关联字段指向审核员的ID", [])) < 10:
            reviewerid = str(len(cache.get("审核员ID关联字段指向审核员的ID", [])))
            # reviewerid = get(faker,'审核员ID关联字段指向审核员的ID')
        else:
            reviewerid = faker.random.choice(
                list(
                    cache.get(
                        "审核员ID关联字段指向审核员的ID",
                    )
                )
            )
        # 用于外键补充 原字段：审核员ID关联字段指向审核员的ID【 58187 管理员姓名 】

        if "审核员ID关联字段指向审核员的ID" not in cache:
            cache["审核员ID关联字段指向审核员的ID"] = set()
        cache["审核员ID关联字段指向审核员的ID"].add(reviewerid)
        values.append("'" + str(reviewerid) + "'")

        # 审核时间 根据名称选择合适的函数来生成数据

        reviewtime = get(faker, "审核时间")
        values.append("'" + str(reviewtime) + "'")

        # 拒绝原因如果状态为审核拒绝则记录拒绝的具体原因 根据名称选择合适的函数来生成数据

        rejectrekwkwason = get(faker, "拒绝原因如果状态为审核拒绝则记录拒绝的具体原因")
        values.append("'" + str(rejectrekwkwason) + "'")

        # 审核备注 根据名称选择合适的函数来生成数据

        comment = get(faker, "审核备注")
        values.append("'" + str(comment) + "'")

        # 是否最终审核标记该审核是否为最终审核结果 根据名称选择合适的函数来生成数据

        kwkwisfkwkwinal = get(faker, "是否最终审核标记该审核是否为最终审核结果")
        values.append("'" + str(kwkwisfkwkwinal) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频封面图片表


def generate_videocoverimage(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videocoverimage"
    fields_en = [
        "`videoid`",
        "`coverimageurl`",
        "`imagekwkwfkwkwormat`",
        "`imagesize`",
        "`uploadtime`",
        "`creatkwkworid`",
        "`status`",
        "`description`",
        "`kwkwiskwkwdefault`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联字段指向视频的--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联字段指向视频的", [])) < 10:
            videoid = str(len(cache.get("视频ID关联字段指向视频的", [])))
            # videoid = get(faker,'视频ID关联字段指向视频的')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联字段指向视频的",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联字段指向视频的【 57900 视频标题 】

        if "视频ID关联字段指向视频的" not in cache:
            cache["视频ID关联字段指向视频的"] = set()
        cache["视频ID关联字段指向视频的"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 封面图片URL 根据名称选择合适的函数来生成数据

        coverimageurl = get(faker, "封面图片URL")
        values.append("'" + str(coverimageurl) + "'")

        # 图片格式 根据名称选择合适的函数来生成数据

        imagekwkwfkwkwormat = get(faker, "图片格式")
        values.append("'" + str(imagekwkwfkwkwormat) + "'")

        # 图片大小单位KB 根据名称选择合适的函数来生成数据

        imagesize = get(faker, "图片大小单位KB")
        values.append("'" + str(imagesize) + "'")

        # 上传时间 根据名称选择合适的函数来生成数据

        uploadtime = get(faker, "上传时间")
        values.append("'" + str(uploadtime) + "'")

        # 本表字段：创建者ID关联字段指向用户的--》关联表：57990--》字段：用户名

        if len(cache.get("创建者ID关联字段指向用户的", [])) < 10:
            creatkwkworid = str(len(cache.get("创建者ID关联字段指向用户的", [])))
            # creatkwkworid = get(faker,'创建者ID关联字段指向用户的')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "创建者ID关联字段指向用户的",
                    )
                )
            )
        # 用于外键补充 原字段：创建者ID关联字段指向用户的【 57990 用户名 】

        if "创建者ID关联字段指向用户的" not in cache:
            cache["创建者ID关联字段指向用户的"] = set()
        cache["创建者ID关联字段指向用户的"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        # 状态例如有效、无效、待审核 根据名称选择合适的函数来生成数据

        status = get(faker, "状态例如有效、无效、待审核")
        values.append("'" + str(status) + "'")

        # 图片描述 根据名称选择合适的函数来生成数据

        description = get(faker, "图片描述")
        values.append("'" + str(description) + "'")

        # 是否为默认封面kwTruekwFalse 根据名称选择合适的函数来生成数据

        kwkwiskwkwdefault = get(faker, "是否为默认封面kwTruekwFalse")
        values.append("'" + str(kwkwiskwkwdefault) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频矩阵配置表


def generate_videomatrixconfig(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videomatrixconfig"
    fields_en = [
        "`matrixname`",
        "`description`",
        "`createdat`",
        "`updatedat`",
        "`videosourceid`",
        "`outputchannelid`",
        "`layoutconfig`",
        "`kwkwisactive`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频矩阵名称 根据名称选择合适的函数来生成数据

        matrixname = get(faker, "视频矩阵名称")
        values.append("'" + str(matrixname) + "'")

        # 描述信息 根据名称选择合适的函数来生成数据

        description = get(faker, "描述信息")
        values.append("'" + str(description) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        # 本表字段：视频源ID关联视频源--》关联表：57900--》字段：视频标题

        if len(cache.get("视频源ID关联视频源", [])) < 10:
            videosourceid = str(len(cache.get("视频源ID关联视频源", [])))
            # videosourceid = get(faker,'视频源ID关联视频源')
        else:
            videosourceid = faker.random.choice(
                list(
                    cache.get(
                        "视频源ID关联视频源",
                    )
                )
            )
        # 用于外键补充 原字段：视频源ID关联视频源【 57900 视频标题 】

        if "视频源ID关联视频源" not in cache:
            cache["视频源ID关联视频源"] = set()
        cache["视频源ID关联视频源"].add(videosourceid)
        values.append("'" + str(videosourceid) + "'")

        # 本表字段：输出通道ID关联输出通道--》关联表：57925--》字段：文件名

        if len(cache.get("输出通道ID关联输出通道", [])) < 10:
            outputchannelid = str(len(cache.get("输出通道ID关联输出通道", [])))
            # outputchannelid = get(faker,'输出通道ID关联输出通道')
        else:
            outputchannelid = faker.random.choice(
                list(
                    cache.get(
                        "输出通道ID关联输出通道",
                    )
                )
            )
        # 用于外键补充 原字段：输出通道ID关联输出通道【 57925 文件名 】

        if "输出通道ID关联输出通道" not in cache:
            cache["输出通道ID关联输出通道"] = set()
        cache["输出通道ID关联输出通道"].add(outputchannelid)
        values.append("'" + str(outputchannelid) + "'")

        # 布局配置如1x4 根据名称选择合适的函数来生成数据

        layoutconfig = get(faker, "布局配置如1x4")
        values.append("'" + str(layoutconfig) + "'")

        # 是否激活用于控制视频矩阵的启用状态 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于控制视频矩阵的启用状态")
        values.append("'" + str(kwkwisactive) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频矩阵节点表


def generate_videomatrixnode(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videomatrixnode"
    fields_en = [
        "`nodename`",
        "`videosourceid`",
        "`videokwkwfkwkwormat`",
        "`resolution`",
        "`status`",
        "`createtime`",
        "`updatetime`",
        "`parentnodeid`",
        "`description`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 节点名称 根据名称选择合适的函数来生成数据

        nodename = get(faker, "节点名称")
        values.append("'" + str(nodename) + "'")

        # 本表字段：关联视频源ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频源ID", [])) < 10:
            videosourceid = str(len(cache.get("关联视频源ID", [])))
            # videosourceid = get(faker,'关联视频源ID')
        else:
            videosourceid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频源ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频源ID【 57900 视频标题 】

        if "关联视频源ID" not in cache:
            cache["关联视频源ID"] = set()
        cache["关联视频源ID"].add(videosourceid)
        values.append("'" + str(videosourceid) + "'")

        # 视频格式 根据名称选择合适的函数来生成数据

        videokwkwfkwkwormat = get(faker, "视频格式")
        values.append("'" + str(videokwkwfkwkwormat) + "'")

        # 分辨率 根据名称选择合适的函数来生成数据

        resolution = get(faker, "分辨率")
        values.append("'" + str(resolution) + "'")

        # 状态如在线、离线、维护中 根据名称选择合适的函数来生成数据

        status = get(faker, "状态如在线、离线、维护中")
        values.append("'" + str(status) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 本表字段：关联父节点ID用于示节点之间的层级关系--》关联表：58043--》字段：节点名称

        if len(cache.get("关联父节点ID用于示节点之间的层级关系", [])) < 10:
            parentnodeid = str(
                len(cache.get("关联父节点ID用于示节点之间的层级关系", []))
            )
            # parentnodeid = get(faker,'关联父节点ID用于示节点之间的层级关系')
        else:
            parentnodeid = faker.random.choice(
                list(
                    cache.get(
                        "关联父节点ID用于示节点之间的层级关系",
                    )
                )
            )
        # 用于外键补充 原字段：关联父节点ID用于示节点之间的层级关系【 58043 节点名称 】

        if "关联父节点ID用于示节点之间的层级关系" not in cache:
            cache["关联父节点ID用于示节点之间的层级关系"] = set()
        cache["关联父节点ID用于示节点之间的层级关系"].add(parentnodeid)
        values.append("'" + str(parentnodeid) + "'")

        # 描述信息 根据名称选择合适的函数来生成数据

        description = get(faker, "描述信息")
        values.append("'" + str(description) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频矩阵播放记录表


def generate_videomatrixplayreckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videomatrixplayreckwkword"
    fields_en = [
        "`videoid`",
        "`matrixid`",
        "`playtime`",
        "`playduration`",
        "`userid`",
        "`deviceid`",
        "`playstatus`",
        "`ipaddress`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联视频--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联视频", [])) < 10:
            videoid = str(len(cache.get("视频ID关联视频", [])))
            # videoid = get(faker,'视频ID关联视频')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联视频",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联视频【 57900 视频标题 】

        if "视频ID关联视频" not in cache:
            cache["视频ID关联视频"] = set()
        cache["视频ID关联视频"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：矩阵ID关联视频矩阵--》关联表：58035--》字段：视频矩阵名称

        if len(cache.get("矩阵ID关联视频矩阵", [])) < 10:
            matrixid = str(len(cache.get("矩阵ID关联视频矩阵", [])))
            # matrixid = get(faker,'矩阵ID关联视频矩阵')
        else:
            matrixid = faker.random.choice(
                list(
                    cache.get(
                        "矩阵ID关联视频矩阵",
                    )
                )
            )
        # 用于外键补充 原字段：矩阵ID关联视频矩阵【 58035 视频矩阵名称 】

        if "矩阵ID关联视频矩阵" not in cache:
            cache["矩阵ID关联视频矩阵"] = set()
        cache["矩阵ID关联视频矩阵"].add(matrixid)
        values.append("'" + str(matrixid) + "'")

        # 播放时间 根据名称选择合适的函数来生成数据

        playtime = get(faker, "播放时间")
        values.append("'" + str(playtime) + "'")

        # 播放时长秒 根据名称选择合适的函数来生成数据

        playduration = get(faker, "播放时长秒")
        values.append("'" + str(playduration) + "'")

        # 本表字段：用户ID关联用户--》关联表：57990--》字段：用户名

        if len(cache.get("用户ID关联用户", [])) < 10:
            userid = str(len(cache.get("用户ID关联用户", [])))
            # userid = get(faker,'用户ID关联用户')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "用户ID关联用户",
                    )
                )
            )
        # 用于外键补充 原字段：用户ID关联用户【 57990 用户名 】

        if "用户ID关联用户" not in cache:
            cache["用户ID关联用户"] = set()
        cache["用户ID关联用户"].add(userid)
        values.append("'" + str(userid) + "'")

        # 本表字段：设备ID关联设备--》关联表：58057--》字段：设备ID关联设备

        if len(cache.get("设备ID关联设备", [])) < 10:
            deviceid = str(len(cache.get("设备ID关联设备", [])))
            # deviceid = get(faker,'设备ID关联设备')
        else:
            deviceid = faker.random.choice(
                list(
                    cache.get(
                        "设备ID关联设备",
                    )
                )
            )
        # 用于外键补充 原字段：设备ID关联设备【 58057 设备ID关联设备 】

        if "设备ID关联设备" not in cache:
            cache["设备ID关联设备"] = set()
        cache["设备ID关联设备"].add(deviceid)
        values.append("'" + str(deviceid) + "'")

        # 播放状态如成功、失败、中断等 根据名称选择合适的函数来生成数据

        playstatus = get(faker, "播放状态如成功、失败、中断等")
        values.append("'" + str(playstatus) + "'")

        # 播放请求的IP地址 根据名称选择合适的函数来生成数据

        ipaddress = get(faker, "播放请求的IP地址")
        values.append("'" + str(ipaddress) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频关联内容表


def generate_videorelatedcontent(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videorelatedcontent"
    fields_en = [
        "`videoid`",
        "`contentid`",
        "`contenttype`",
        "`relatedtime`",
        "`description`",
        "`status`",
        "`creatkwkworid`",
        "`creationtime`",
        "`modkwkwificationtime`",
        "`videotablevideoname`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：关联内容ID--》关联表：57945--》字段：评论内容

        if len(cache.get("关联内容ID", [])) < 10:
            contentid = str(len(cache.get("关联内容ID", [])))
            # contentid = get(faker,'关联内容ID')
        else:
            contentid = faker.random.choice(
                list(
                    cache.get(
                        "关联内容ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联内容ID【 57945 评论内容 】

        if "关联内容ID" not in cache:
            cache["关联内容ID"] = set()
        cache["关联内容ID"].add(contentid)
        values.append("'" + str(contentid) + "'")

        # 内容类型 根据名称选择合适的函数来生成数据

        contenttype = get(faker, "内容类型")
        values.append("'" + str(contenttype) + "'")

        # 本表字段：关联时间--》关联表：58063--》字段：关联时间

        if len(cache.get("关联时间", [])) < 10:
            relatedtime = str(len(cache.get("关联时间", [])))
            # relatedtime = get(faker,'关联时间')
        else:
            relatedtime = faker.random.choice(
                list(
                    cache.get(
                        "关联时间",
                    )
                )
            )
        # 用于外键补充 原字段：关联时间【 58063 关联时间 】

        if "关联时间" not in cache:
            cache["关联时间"] = set()
        cache["关联时间"].add(relatedtime)
        values.append("'" + str(relatedtime) + "'")

        # 描述 根据名称选择合适的函数来生成数据

        description = get(faker, "描述")
        values.append("'" + str(description) + "'")

        # 状态 根据名称选择合适的函数来生成数据

        status = get(faker, "状态")
        values.append("'" + str(status) + "'")

        # 本表字段：关联创建者ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联创建者ID", [])) < 10:
            creatkwkworid = str(len(cache.get("关联创建者ID", [])))
            # creatkwkworid = get(faker,'关联创建者ID')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "关联创建者ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联创建者ID【 57990 用户名 】

        if "关联创建者ID" not in cache:
            cache["关联创建者ID"] = set()
        cache["关联创建者ID"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        creationtime = get(faker, "创建时间")
        values.append("'" + str(creationtime) + "'")

        # 修改时间 根据名称选择合适的函数来生成数据

        modkwkwificationtime = get(faker, "修改时间")
        values.append("'" + str(modkwkwificationtime) + "'")

        # 本表字段：视频名称关联字段视频名假设为VideoTable关联字段为视频名称--》关联表：57900--》字段：视频标题

        if (
            len(
                cache.get(
                    "视频名称关联字段视频名假设为VideoTable关联字段为视频名称", []
                )
            )
            < 10
        ):
            videotablevideoname = str(
                len(
                    cache.get(
                        "视频名称关联字段视频名假设为VideoTable关联字段为视频名称", []
                    )
                )
            )
            # videotablevideoname = get(faker,'视频名称关联字段视频名假设为VideoTable关联字段为视频名称')
        else:
            videotablevideoname = faker.random.choice(
                list(
                    cache.get(
                        "视频名称关联字段视频名假设为VideoTable关联字段为视频名称",
                    )
                )
            )
        # 用于外键补充 原字段：视频名称关联字段视频名假设为VideoTable关联字段为视频名称【 57900 视频标题 】

        if "视频名称关联字段视频名假设为VideoTable关联字段为视频名称" not in cache:
            cache["视频名称关联字段视频名假设为VideoTable关联字段为视频名称"] = set()
        cache["视频名称关联字段视频名假设为VideoTable关联字段为视频名称"].add(
            videotablevideoname
        )
        values.append("'" + str(videotablevideoname) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频错误日志表


def generate_videoerrkwkworlog(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoerrkwkworlog"
    fields_en = [
        "`videoid`",
        "`errkwkwortype`",
        "`errkwkwordescription`",
        "`errkwkwortime`",
        "`resolved`",
        "`resolvedtime`",
        "`resolvedby`",
        "`devicekwkwinfo`",
        "`clientip`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 错误类型 根据名称选择合适的函数来生成数据

        errkwkwortype = get(faker, "错误类型")
        values.append("'" + str(errkwkwortype) + "'")

        # 错误描述 根据名称选择合适的函数来生成数据

        errkwkwordescription = get(faker, "错误描述")
        values.append("'" + str(errkwkwordescription) + "'")

        # 错误时间 根据名称选择合适的函数来生成数据

        errkwkwortime = get(faker, "错误时间")
        values.append("'" + str(errkwkwortime) + "'")

        # 是否已解决 根据名称选择合适的函数来生成数据

        resolved = get(faker, "是否已解决")
        values.append("'" + str(resolved) + "'")

        # 解决时间 根据名称选择合适的函数来生成数据

        resolvedtime = get(faker, "解决时间")
        values.append("'" + str(resolvedtime) + "'")

        # 本表字段：关联解决人--》关联表：58187--》字段：管理员姓名

        if len(cache.get("关联解决人", [])) < 10:
            resolvedby = str(len(cache.get("关联解决人", [])))
            # resolvedby = get(faker,'关联解决人')
        else:
            resolvedby = faker.random.choice(
                list(
                    cache.get(
                        "关联解决人",
                    )
                )
            )
        # 用于外键补充 原字段：关联解决人【 58187 管理员姓名 】

        if "关联解决人" not in cache:
            cache["关联解决人"] = set()
        cache["关联解决人"].add(resolvedby)
        values.append("'" + str(resolvedby) + "'")

        # 设备信息 根据名称选择合适的函数来生成数据

        devicekwkwinfo = get(faker, "设备信息")
        values.append("'" + str(devicekwkwinfo) + "'")

        # 客户端IP 根据名称选择合适的函数来生成数据

        clientip = get(faker, "客户端IP")
        values.append("'" + str(clientip) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频热度统计表


def generate_videopopularity(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videopopularity"
    fields_en = [
        "`videoid`",
        "`viewcount`",
        "`likecount`",
        "`sharecount`",
        "`commentcount`",
        "`popularitysckwkwore`",
        "`publkwkwishtime`",
        "`updatetime`",
        "`categkwkworyid`",
        "`creatkwkworid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 观看次数 根据名称选择合适的函数来生成数据

        viewcount = get(faker, "观看次数")
        values.append("'" + str(viewcount) + "'")

        # 点赞次数 根据名称选择合适的函数来生成数据

        likecount = get(faker, "点赞次数")
        values.append("'" + str(likecount) + "'")

        # 分享次数 根据名称选择合适的函数来生成数据

        sharecount = get(faker, "分享次数")
        values.append("'" + str(sharecount) + "'")

        # 评论次数 根据名称选择合适的函数来生成数据

        commentcount = get(faker, "评论次数")
        values.append("'" + str(commentcount) + "'")

        # 热度评分 根据名称选择合适的函数来生成数据

        popularitysckwkwore = get(faker, "热度评分")
        values.append("'" + str(popularitysckwkwore) + "'")

        # 发布时间 根据名称选择合适的函数来生成数据

        publkwkwishtime = get(faker, "发布时间")
        values.append("'" + str(publkwkwishtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 本表字段：关联类别ID--》关联表：57909--》字段：分类名称

        if len(cache.get("关联类别ID", [])) < 10:
            categkwkworyid = str(len(cache.get("关联类别ID", [])))
            # categkwkworyid = get(faker,'关联类别ID')
        else:
            categkwkworyid = faker.random.choice(
                list(
                    cache.get(
                        "关联类别ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联类别ID【 57909 分类名称 】

        if "关联类别ID" not in cache:
            cache["关联类别ID"] = set()
        cache["关联类别ID"].add(categkwkworyid)
        values.append("'" + str(categkwkworyid) + "'")

        # 本表字段：关联创作者ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联创作者ID", [])) < 10:
            creatkwkworid = str(len(cache.get("关联创作者ID", [])))
            # creatkwkworid = get(faker,'关联创作者ID')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "关联创作者ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联创作者ID【 57990 用户名 】

        if "关联创作者ID" not in cache:
            cache["关联创作者ID"] = set()
        cache["关联创作者ID"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频推荐算法参数表


def generate_videorecommendationparams(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videorecommendationparams"
    fields_en = [
        "`algkwkworithmname`",
        "`paramname`",
        "`paramvalue`",
        "`description`",
        "`createdat`",
        "`updatedat`",
        "`kwkwisactive`",
        "`videotypeid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 算法名称 根据名称选择合适的函数来生成数据

        algkwkworithmname = get(faker, "算法名称")
        values.append("'" + str(algkwkworithmname) + "'")

        # 参数名称 根据名称选择合适的函数来生成数据

        paramname = get(faker, "参数名称")
        values.append("'" + str(paramname) + "'")

        # 参数值 根据名称选择合适的函数来生成数据

        paramvalue = get(faker, "参数值")
        values.append("'" + str(paramvalue) + "'")

        # 参数描述 根据名称选择合适的函数来生成数据

        description = get(faker, "参数描述")
        values.append("'" + str(description) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        # 是否启用 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否启用")
        values.append("'" + str(kwkwisactive) + "'")

        # 本表字段：视频类型ID关联字段指向视频类型--》关联表：57909--》字段：分类名称

        if len(cache.get("视频类型ID关联字段指向视频类型", [])) < 10:
            videotypeid = str(len(cache.get("视频类型ID关联字段指向视频类型", [])))
            # videotypeid = get(faker,'视频类型ID关联字段指向视频类型')
        else:
            videotypeid = faker.random.choice(
                list(
                    cache.get(
                        "视频类型ID关联字段指向视频类型",
                    )
                )
            )
        # 用于外键补充 原字段：视频类型ID关联字段指向视频类型【 57909 分类名称 】

        if "视频类型ID关联字段指向视频类型" not in cache:
            cache["视频类型ID关联字段指向视频类型"] = set()
        cache["视频类型ID关联字段指向视频类型"].add(videotypeid)
        values.append("'" + str(videotypeid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频广告信息表


def generate_videoadinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoadinfo"
    fields_en = [
        "`videoadid`",
        "`title`",
        "`description`",
        "`starttime`",
        "`endtime`",
        "`videourl`",
        "`thumbnailurl`",
        "`advertkwkwiserid`",
        "`categkwkworyid`",
        "`status`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频广告ID 根据名称选择合适的函数来生成数据

        videoadid = get(faker, "视频广告ID")
        values.append("'" + str(videoadid) + "'")

        # 广告标题 根据名称选择合适的函数来生成数据

        title = get(faker, "广告标题")
        values.append("'" + str(title) + "'")

        # 广告描述 根据名称选择合适的函数来生成数据

        description = get(faker, "广告描述")
        values.append("'" + str(description) + "'")

        # 开始时间 根据名称选择合适的函数来生成数据

        starttime = get(faker, "开始时间")
        values.append("'" + str(starttime) + "'")

        # 结束时间 根据名称选择合适的函数来生成数据

        endtime = get(faker, "结束时间")
        values.append("'" + str(endtime) + "'")

        # 视频链接 根据名称选择合适的函数来生成数据

        videourl = get(faker, "视频链接")
        values.append("'" + str(videourl) + "'")

        # 缩略图链接 根据名称选择合适的函数来生成数据

        thumbnailurl = get(faker, "缩略图链接")
        values.append("'" + str(thumbnailurl) + "'")

        # 广告主ID 根据名称选择合适的函数来生成数据

        advertkwkwiserid = get(faker, "广告主ID")
        values.append("'" + str(advertkwkwiserid) + "'")

        # 广告分类ID 根据名称选择合适的函数来生成数据

        categkwkworyid = get(faker, "广告分类ID")
        values.append("'" + str(categkwkworyid) + "'")

        # 广告状态 根据名称选择合适的函数来生成数据

        status = get(faker, "广告状态")
        values.append("'" + str(status) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频广告播放记录表


def generate_videoadplayreckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoadplayreckwkword"
    fields_en = [
        "`videoadid`",
        "`playtime`",
        "`playduration`",
        "`userid`",
        "`devicetype`",
        "`ipaddressip`",
        "`location`",
        "`playstatus`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频广告ID 根据名称选择合适的函数来生成数据

        videoadid = get(faker, "视频广告ID")
        values.append("'" + str(videoadid) + "'")

        # 播放时间 根据名称选择合适的函数来生成数据

        playtime = get(faker, "播放时间")
        values.append("'" + str(playtime) + "'")

        # 播放时长 根据名称选择合适的函数来生成数据

        playduration = get(faker, "播放时长")
        values.append("'" + str(playduration) + "'")

        # 本表字段：用户ID关联用户--》关联表：57990--》字段：用户名

        if len(cache.get("用户ID关联用户", [])) < 10:
            userid = str(len(cache.get("用户ID关联用户", [])))
            # userid = get(faker,'用户ID关联用户')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "用户ID关联用户",
                    )
                )
            )
        # 用于外键补充 原字段：用户ID关联用户【 57990 用户名 】

        if "用户ID关联用户" not in cache:
            cache["用户ID关联用户"] = set()
        cache["用户ID关联用户"].add(userid)
        values.append("'" + str(userid) + "'")

        # 设备类型 根据名称选择合适的函数来生成数据

        devicetype = get(faker, "设备类型")
        values.append("'" + str(devicetype) + "'")

        # 地址 根据名称选择合适的函数来生成数据

        ipaddressip = get(faker, "地址")
        values.append("'" + str(ipaddressip) + "'")

        # 地理位置 根据名称选择合适的函数来生成数据

        location = get(faker, "地理位置")
        values.append("'" + str(location) + "'")

        # 播放状态如成功、失败、中断等 根据名称选择合适的函数来生成数据

        playstatus = get(faker, "播放状态如成功、失败、中断等")
        values.append("'" + str(playstatus) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频弹幕表


def generate_videodanmu(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videodanmu"
    fields_en = [
        "`videoid`",
        "`danmucontent`",
        "`userid`",
        "`sendtime`",
        "`colkwkwor`",
        "`fontsize`",
        "`kwkwisvkwkwisible`",
        "`position`",
        "`duration`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 视频唯一标识符关联视频 根据名称选择合适的函数来生成数据

        videoid = get(faker, "视频唯一标识符关联视频")
        values.append("'" + str(videoid) + "'")

        # 弹幕内容 根据名称选择合适的函数来生成数据

        danmucontent = get(faker, "弹幕内容")
        values.append("'" + str(danmucontent) + "'")

        # 发送弹幕的用户唯一标识符关联用户 根据名称选择合适的函数来生成数据

        userid = get(faker, "发送弹幕的用户唯一标识符关联用户")
        values.append("'" + str(userid) + "'")

        # 发送时间 根据名称选择合适的函数来生成数据

        sendtime = get(faker, "发送时间")
        values.append("'" + str(sendtime) + "'")

        # 弹幕颜色 根据名称选择合适的函数来生成数据

        colkwkwor = get(faker, "弹幕颜色")
        values.append("'" + str(colkwkwor) + "'")

        # 字体大小 根据名称选择合适的函数来生成数据

        fontsize = get(faker, "字体大小")
        values.append("'" + str(fontsize) + "'")

        # 是否可见用于控制弹幕的显示与隐藏 根据名称选择合适的函数来生成数据

        kwkwisvkwkwisible = get(faker, "是否可见用于控制弹幕的显示与隐藏")
        values.append("'" + str(kwkwisvkwkwisible) + "'")

        # 弹幕位置如顶部、底部、滚动等 根据名称选择合适的函数来生成数据

        position = get(faker, "弹幕位置如顶部、底部、滚动等")
        values.append("'" + str(position) + "'")

        # 弹幕显示时长秒 根据名称选择合适的函数来生成数据

        duration = get(faker, "弹幕显示时长秒")
        values.append("'" + str(duration) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频弹幕屏蔽词表


def generate_videodanmublockwkwkwords(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videodanmublockwkwkwords"
    fields_en = [
        "`wkwkword`",
        "`videoid`",
        "`creatkwkworid`",
        "`createtime`",
        "`updatetime`",
        "`kwkwisactive`",
        "`blocktype`",
        "`description`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 屏蔽词 根据名称选择合适的函数来生成数据

        wkwkword = get(faker, "屏蔽词")
        values.append("'" + str(wkwkword) + "'")

        # 本表字段：视频ID关联字段指向视频的ID--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联字段指向视频的ID", [])) < 10:
            videoid = str(len(cache.get("视频ID关联字段指向视频的ID", [])))
            # videoid = get(faker,'视频ID关联字段指向视频的ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联字段指向视频的ID",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联字段指向视频的ID【 57900 视频标题 】

        if "视频ID关联字段指向视频的ID" not in cache:
            cache["视频ID关联字段指向视频的ID"] = set()
        cache["视频ID关联字段指向视频的ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 本表字段：创建者ID关联字段指向用户的ID--》关联表：57990--》字段：用户名

        if len(cache.get("创建者ID关联字段指向用户的ID", [])) < 10:
            creatkwkworid = str(len(cache.get("创建者ID关联字段指向用户的ID", [])))
            # creatkwkworid = get(faker,'创建者ID关联字段指向用户的ID')
        else:
            creatkwkworid = faker.random.choice(
                list(
                    cache.get(
                        "创建者ID关联字段指向用户的ID",
                    )
                )
            )
        # 用于外键补充 原字段：创建者ID关联字段指向用户的ID【 57990 用户名 】

        if "创建者ID关联字段指向用户的ID" not in cache:
            cache["创建者ID关联字段指向用户的ID"] = set()
        cache["创建者ID关联字段指向用户的ID"].add(creatkwkworid)
        values.append("'" + str(creatkwkworid) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createtime = get(faker, "创建时间")
        values.append("'" + str(createtime) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatetime = get(faker, "更新时间")
        values.append("'" + str(updatetime) + "'")

        # 是否激活用于控制屏蔽词是否生效 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于控制屏蔽词是否生效")
        values.append("'" + str(kwkwisactive) + "'")

        # 屏蔽类型如关键词、正则达式等 根据名称选择合适的函数来生成数据

        blocktype = get(faker, "屏蔽类型如关键词、正则达式等")
        values.append("'" + str(blocktype) + "'")

        # 描述对屏蔽词的额外说明或备注 根据名称选择合适的函数来生成数据

        description = get(faker, "描述对屏蔽词的额外说明或备注")
        values.append("'" + str(description) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频多语言字幕表


def generate_videomultilkwkwingualsubtitles(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videomultilkwkwingualsubtitles"
    fields_en = [
        "`videoid`",
        "`languagecode`",
        "`subtitletext`",
        "`starttime`",
        "`endtime`",
        "`createdat`",
        "`updatedat`",
        "`kwkwisactive`",
        "`userid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 语言代码 根据名称选择合适的函数来生成数据

        languagecode = get(faker, "语言代码")
        values.append("'" + str(languagecode) + "'")

        # 字幕文本 根据名称选择合适的函数来生成数据

        subtitletext = get(faker, "字幕文本")
        values.append("'" + str(subtitletext) + "'")

        # 开始时间字幕出现时间 根据名称选择合适的函数来生成数据

        starttime = get(faker, "开始时间字幕出现时间")
        values.append("'" + str(starttime) + "'")

        # 结束时间字幕消失时间 根据名称选择合适的函数来生成数据

        endtime = get(faker, "结束时间字幕消失时间")
        values.append("'" + str(endtime) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        # 是否激活用于控制字幕是否显示在视频中 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于控制字幕是否显示在视频中")
        values.append("'" + str(kwkwisactive) + "'")

        # 本表字段：创建者用户ID关联到用户示谁添加了这条字幕--》关联表：57990--》字段：用户名

        if len(cache.get("创建者用户ID关联到用户示谁添加了这条字幕", [])) < 10:
            userid = str(len(cache.get("创建者用户ID关联到用户示谁添加了这条字幕", [])))
            # userid = get(faker,'创建者用户ID关联到用户示谁添加了这条字幕')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "创建者用户ID关联到用户示谁添加了这条字幕",
                    )
                )
            )
        # 用于外键补充 原字段：创建者用户ID关联到用户示谁添加了这条字幕【 57990 用户名 】

        if "创建者用户ID关联到用户示谁添加了这条字幕" not in cache:
            cache["创建者用户ID关联到用户示谁添加了这条字幕"] = set()
        cache["创建者用户ID关联到用户示谁添加了这条字幕"].add(userid)
        values.append("'" + str(userid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频转码任务表


def generate_videotranscodkwkwingtkwkwask(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videotranscodkwkwingtkwkwask"
    fields_en = [
        "`tkwkwaskid`",
        "`videoid`",
        "`sourcepath`",
        "`targetkwkwfkwkwormat`",
        "`status`",
        "`progress`",
        "`createdat`",
        "`updatedat`",
        "`userid`",
        "`prikwkwority`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 任务ID 根据名称选择合适的函数来生成数据

        tkwkwaskid = get(faker, "任务ID")
        values.append("'" + str(tkwkwaskid) + "'")

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 源视频路径 根据名称选择合适的函数来生成数据

        sourcepath = get(faker, "源视频路径")
        values.append("'" + str(sourcepath) + "'")

        # 目标格式 根据名称选择合适的函数来生成数据

        targetkwkwfkwkwormat = get(faker, "目标格式")
        values.append("'" + str(targetkwkwfkwkwormat) + "'")

        # 任务状态 根据名称选择合适的函数来生成数据

        status = get(faker, "任务状态")
        values.append("'" + str(status) + "'")

        # 任务进度 根据名称选择合适的函数来生成数据

        progress = get(faker, "任务进度")
        values.append("'" + str(progress) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        # 本表字段：关联用户ID--》关联表：57990--》字段：用户名

        if len(cache.get("关联用户ID", [])) < 10:
            userid = str(len(cache.get("关联用户ID", [])))
            # userid = get(faker,'关联用户ID')
        else:
            userid = faker.random.choice(
                list(
                    cache.get(
                        "关联用户ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联用户ID【 57990 用户名 】

        if "关联用户ID" not in cache:
            cache["关联用户ID"] = set()
        cache["关联用户ID"].add(userid)
        values.append("'" + str(userid) + "'")

        # 任务优先级 根据名称选择合适的函数来生成数据

        prikwkwority = get(faker, "任务优先级")
        values.append("'" + str(prikwkwority) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频分析指标表


def generate_videoanalyskwkwismetrics(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoanalyskwkwismetrics"
    fields_en = [
        "`videoid`",
        "`analyskwkwistime`",
        "`viewcount`",
        "`likecount`",
        "`sharecount`",
        "`commentcount`",
        "`bouncerate`",
        "`averagewatchtime`",
        "`engagementrate`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联视频--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联视频", [])) < 10:
            videoid = str(len(cache.get("视频ID关联视频", [])))
            # videoid = get(faker,'视频ID关联视频')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联视频",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联视频【 57900 视频标题 】

        if "视频ID关联视频" not in cache:
            cache["视频ID关联视频"] = set()
        cache["视频ID关联视频"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 分析时间 根据名称选择合适的函数来生成数据

        analyskwkwistime = get(faker, "分析时间")
        values.append("'" + str(analyskwkwistime) + "'")

        # 观看次数 根据名称选择合适的函数来生成数据

        viewcount = get(faker, "观看次数")
        values.append("'" + str(viewcount) + "'")

        # 点赞次数 根据名称选择合适的函数来生成数据

        likecount = get(faker, "点赞次数")
        values.append("'" + str(likecount) + "'")

        # 分享次数 根据名称选择合适的函数来生成数据

        sharecount = get(faker, "分享次数")
        values.append("'" + str(sharecount) + "'")

        # 评论次数 根据名称选择合适的函数来生成数据

        commentcount = get(faker, "评论次数")
        values.append("'" + str(commentcount) + "'")

        # 跳出率 根据名称选择合适的函数来生成数据

        bouncerate = get(faker, "跳出率")
        values.append("'" + str(bouncerate) + "'")

        # 平均观看时长 根据名称选择合适的函数来生成数据

        averagewatchtime = get(faker, "平均观看时长")
        values.append("'" + str(averagewatchtime) + "'")

        # 互动率 根据名称选择合适的函数来生成数据

        engagementrate = get(faker, "互动率")
        values.append("'" + str(engagementrate) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频质量评估表


def generate_videoqualityassessment(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videoqualityassessment"
    fields_en = [
        "`videoid`",
        "`qualitysckwkwore`",
        "`kwkwassessmenttime`",
        "`reviewerid`",
        "`framerate`",
        "`resolution`",
        "`bitrate`",
        "`encodkwkwingkwkwfkwkwormat`",
        "`ckwkworruptiondetected`",
        "`relatedkwkwissueid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 质量评分 根据名称选择合适的函数来生成数据

        qualitysckwkwore = get(faker, "质量评分")
        values.append("'" + str(qualitysckwkwore) + "'")

        # 评估时间 根据名称选择合适的函数来生成数据

        kwkwassessmenttime = get(faker, "评估时间")
        values.append("'" + str(kwkwassessmenttime) + "'")

        # 本表字段：关联评审员ID--》关联表：58187--》字段：管理员姓名

        if len(cache.get("关联评审员ID", [])) < 10:
            reviewerid = str(len(cache.get("关联评审员ID", [])))
            # reviewerid = get(faker,'关联评审员ID')
        else:
            reviewerid = faker.random.choice(
                list(
                    cache.get(
                        "关联评审员ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联评审员ID【 58187 管理员姓名 】

        if "关联评审员ID" not in cache:
            cache["关联评审员ID"] = set()
        cache["关联评审员ID"].add(reviewerid)
        values.append("'" + str(reviewerid) + "'")

        # 帧率 根据名称选择合适的函数来生成数据

        framerate = get(faker, "帧率")
        values.append("'" + str(framerate) + "'")

        # 分辨率 根据名称选择合适的函数来生成数据

        resolution = get(faker, "分辨率")
        values.append("'" + str(resolution) + "'")

        # 比特率 根据名称选择合适的函数来生成数据

        bitrate = get(faker, "比特率")
        values.append("'" + str(bitrate) + "'")

        # 编码格式 根据名称选择合适的函数来生成数据

        encodkwkwingkwkwfkwkwormat = get(faker, "编码格式")
        values.append("'" + str(encodkwkwingkwkwfkwkwormat) + "'")

        # 是否检测到损坏 根据名称选择合适的函数来生成数据

        ckwkworruptiondetected = get(faker, "是否检测到损坏")
        values.append("'" + str(ckwkworruptiondetected) + "'")

        # 相关问题ID 根据名称选择合适的函数来生成数据

        relatedkwkwissueid = get(faker, "相关问题ID")
        values.append("'" + str(relatedkwkwissueid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频水印信息表


def generate_videowatermarkinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videowatermarkinfo"
    fields_en = [
        "`videoid`",
        "`watermarktext`",
        "`watermarkposition`",
        "`watermarksize`",
        "`watermarkopacity`",
        "`createdat`",
        "`updatedat`",
        "`kwkwisactive`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：视频ID关联视频--》关联表：57900--》字段：视频标题

        if len(cache.get("视频ID关联视频", [])) < 10:
            videoid = str(len(cache.get("视频ID关联视频", [])))
            # videoid = get(faker,'视频ID关联视频')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "视频ID关联视频",
                    )
                )
            )
        # 用于外键补充 原字段：视频ID关联视频【 57900 视频标题 】

        if "视频ID关联视频" not in cache:
            cache["视频ID关联视频"] = set()
        cache["视频ID关联视频"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 水印文本 根据名称选择合适的函数来生成数据

        watermarktext = get(faker, "水印文本")
        values.append("'" + str(watermarktext) + "'")

        # 水印位置如左上角、右下角等 根据名称选择合适的函数来生成数据

        watermarkposition = get(faker, "水印位置如左上角、右下角等")
        values.append("'" + str(watermarkposition) + "'")

        # 水印大小如百分比或像素值 根据名称选择合适的函数来生成数据

        watermarksize = get(faker, "水印大小如百分比或像素值")
        values.append("'" + str(watermarksize) + "'")

        # 水印透明度0100% 根据名称选择合适的函数来生成数据

        watermarkopacity = get(faker, "水印透明度0100%")
        values.append("'" + str(watermarkopacity) + "'")

        # 创建时间 根据名称选择合适的函数来生成数据

        createdat = get(faker, "创建时间")
        values.append("'" + str(createdat) + "'")

        # 更新时间 根据名称选择合适的函数来生成数据

        updatedat = get(faker, "更新时间")
        values.append("'" + str(updatedat) + "'")

        # 是否激活用于控制水印是否生效如0为未激活1为激活 根据名称选择合适的函数来生成数据

        kwkwisactive = get(faker, "是否激活用于控制水印是否生效如0为未激活1为激活")
        values.append("'" + str(kwkwisactive) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 视频版权信息表


def generate_videocopyrightinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "videocopyrightinfo"
    fields_en = [
        "`videoid`",
        "`copyrightholder`",
        "`copyrightyear`",
        "`licensetype`",
        "`licensestatus`",
        "`description`",
        "`creationdate`",
        "`modkwkwificationdate`",
        "`relatedvideoid`",
    ]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 本表字段：关联视频ID--》关联表：57900--》字段：视频标题

        if len(cache.get("关联视频ID", [])) < 10:
            videoid = str(len(cache.get("关联视频ID", [])))
            # videoid = get(faker,'关联视频ID')
        else:
            videoid = faker.random.choice(
                list(
                    cache.get(
                        "关联视频ID",
                    )
                )
            )
        # 用于外键补充 原字段：关联视频ID【 57900 视频标题 】

        if "关联视频ID" not in cache:
            cache["关联视频ID"] = set()
        cache["关联视频ID"].add(videoid)
        values.append("'" + str(videoid) + "'")

        # 版权持有人 根据名称选择合适的函数来生成数据

        copyrightholder = get(faker, "版权持有人")
        values.append("'" + str(copyrightholder) + "'")

        # 版权年份 根据名称选择合适的函数来生成数据

        copyrightyear = get(faker, "版权年份")
        values.append("'" + str(copyrightyear) + "'")

        # 许可类型 根据名称选择合适的函数来生成数据

        licensetype = get(faker, "许可类型")
        values.append("'" + str(licensetype) + "'")

        # 许可状态 根据名称选择合适的函数来生成数据

        licensestatus = get(faker, "许可状态")
        values.append("'" + str(licensestatus) + "'")

        # 版权描述 根据名称选择合适的函数来生成数据

        description = get(faker, "版权描述")
        values.append("'" + str(description) + "'")

        # 创建日期 根据名称选择合适的函数来生成数据

        creationdate = get(faker, "创建日期")
        values.append("'" + str(creationdate) + "'")

        # 修改日期 根据名称选择合适的函数来生成数据

        modkwkwificationdate = get(faker, "修改日期")
        values.append("'" + str(modkwkwificationdate) + "'")

        # 相关视频ID 根据名称选择合适的函数来生成数据

        relatedvideoid = get(faker, "相关视频ID")
        values.append("'" + str(relatedvideoid) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


# 系统管理员


def generate_supermanager(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table = "supermanager"
    fields_en = ["`username`"]
    if "`id`" in fields_en:
        fields_en.remove("`id`")
    for i in range(100):
        values = list()

        # 管理员姓名 根据名称选择合适的函数来生成数据

        username = get(faker, "管理员姓名")
        values.append("'" + str(username) + "'")

        out.write(
            sql.format(
                databasename=database,
                table=table,
                fields_en=",".join(fields_en),
                values=",".join(values),
            )
        )
    return cache


def generate():
    cache = dict()
    with codecs.open("faker.sql", "w", encoding="utf-8") as out:
        sql = "insert into {databasename}.{table} ({fields_en}) values({values});\r\n"
        faker = Faker("zh_CN")
        database = "vm790_bcfe8a202787453d"
        # 表名字符串,字段英文名

        # 视频信息表

        cache.update(generate_videoinfo(faker, sql, out, database, cache=cache))

        # 视频分类表

        cache.update(generate_videocategkwkwory(faker, sql, out, database, cache=cache))

        # 视频标签表

        cache.update(generate_videotag(faker, sql, out, database, cache=cache))

        # 视频文件存储表

        cache.update(
            generate_videofilestkwkworage(faker, sql, out, database, cache=cache)
        )

        # 视频播放记录表

        cache.update(
            generate_videoplayreckwkword(faker, sql, out, database, cache=cache)
        )

        # 视频评论表

        cache.update(generate_videocomment(faker, sql, out, database, cache=cache))

        # 视频点赞表

        cache.update(generate_videolike(faker, sql, out, database, cache=cache))

        # 视频分享表

        cache.update(generate_videoshare(faker, sql, out, database, cache=cache))

        # 视频观看时长统计表

        cache.update(generate_videoviewduration(faker, sql, out, database, cache=cache))

        # 视频上传用户表

        cache.update(generate_videouploader(faker, sql, out, database, cache=cache))

        # 用户信息表

        cache.update(generate_userinfo(faker, sql, out, database, cache=cache))

        # 用户权限表

        cache.update(
            generate_userpermkwkwission(faker, sql, out, database, cache=cache)
        )

        # 用户观看历史表

        cache.update(
            generate_userwatchhkwkwistkwkwory(faker, sql, out, database, cache=cache)
        )

        # 视频审核状态表

        cache.update(generate_videoauditstatus(faker, sql, out, database, cache=cache))

        # 视频封面图片表

        cache.update(generate_videocoverimage(faker, sql, out, database, cache=cache))

        # 视频矩阵配置表

        cache.update(generate_videomatrixconfig(faker, sql, out, database, cache=cache))

        # 视频矩阵节点表

        cache.update(generate_videomatrixnode(faker, sql, out, database, cache=cache))

        # 视频矩阵播放记录表

        cache.update(
            generate_videomatrixplayreckwkword(faker, sql, out, database, cache=cache)
        )

        # 视频关联内容表

        cache.update(
            generate_videorelatedcontent(faker, sql, out, database, cache=cache)
        )

        # 视频错误日志表

        cache.update(generate_videoerrkwkworlog(faker, sql, out, database, cache=cache))

        # 视频热度统计表

        cache.update(generate_videopopularity(faker, sql, out, database, cache=cache))

        # 视频推荐算法参数表

        cache.update(
            generate_videorecommendationparams(faker, sql, out, database, cache=cache)
        )

        # 视频广告信息表

        cache.update(generate_videoadinfo(faker, sql, out, database, cache=cache))

        # 视频广告播放记录表

        cache.update(
            generate_videoadplayreckwkword(faker, sql, out, database, cache=cache)
        )

        # 视频弹幕表

        cache.update(generate_videodanmu(faker, sql, out, database, cache=cache))

        # 视频弹幕屏蔽词表

        cache.update(
            generate_videodanmublockwkwkwords(faker, sql, out, database, cache=cache)
        )

        # 视频多语言字幕表

        cache.update(
            generate_videomultilkwkwingualsubtitles(
                faker, sql, out, database, cache=cache
            )
        )

        # 视频转码任务表

        cache.update(
            generate_videotranscodkwkwingtkwkwask(
                faker, sql, out, database, cache=cache
            )
        )

        # 视频分析指标表

        cache.update(
            generate_videoanalyskwkwismetrics(faker, sql, out, database, cache=cache)
        )

        # 视频质量评估表

        cache.update(
            generate_videoqualityassessment(faker, sql, out, database, cache=cache)
        )

        # 视频水印信息表

        cache.update(
            generate_videowatermarkinfo(faker, sql, out, database, cache=cache)
        )

        # 视频版权信息表

        cache.update(
            generate_videocopyrightinfo(faker, sql, out, database, cache=cache)
        )

        # 系统管理员

        cache.update(generate_supermanager(faker, sql, out, database, cache=cache))
    from pymysql.connections import Connection
    from pymysql.cursors import DictCursor

    conn = Connection(
        port=3306,
        host="localhost",
        user="root",
        password=os.getenv("PM_UNIT_DATABASE_PSW", "123456"),
        database="vm790_bcfe8a202787453d",
    )
    with codecs.open("faker.sql", "r", encoding="utf-8") as ins:
        with conn.cursor(DictCursor) as cursor:
            count = 0
            for i, sql in enumerate(ins.readlines()):
                try:
                    cursor.execute(sql)
                    cursor.fetchall()
                except Exception as e:
                    print("error: ", e)
                    print(sql)
                    continue
                count += 1
        conn.commit()
        print("Generate OK,Insert Total:", count, "个记录", i + 1, "个sql")
    os.remove("faker.sql")


if __name__ == "__main__":
    generate()
